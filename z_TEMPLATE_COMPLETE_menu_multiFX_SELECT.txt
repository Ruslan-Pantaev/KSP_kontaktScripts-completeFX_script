{ *
*	Author: Ruslan Pantaev
*	GNU Public License
*	January 17, 2017
*	www.R-P.ninja
* }


on init
	{ ---- MAIN ---- }
	message(" ")
	set_script_title("arpiSeaQ_Main")
	make_perfview
	set_ui_height_px(540)
	set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"wallpaper_lines3_COMPLETE_glideMono")
	set_control_par_str($INST_ICON_ID,$CONTROL_PAR_PICTURE,"pinguIcon")
	{ lock_script(540, 1) }

	{ - Keyboard color - }
	declare $countKey
	while ($countKey < 128)
		set_key_color($countKey,$KEY_COLOR_BLACK)
		inc($countKey)
	end while

	{ - Sustain Pedal - }
  

	{ - MENU group presets Select - }
	declare ui_menu $selected_group
	add_menu_item ($selected_group, "none", 0)
	add_menu_item ($selected_group, "Interval", 1)
	add_menu_item ($selected_group, "Portamento", 2)
	add_menu_item ($selected_group, "glideMono", 3)
	add_menu_item ($selected_group, "Microtuning", 4)
	add_menu_item ($selected_group, "Arp", 5)

	make_persistent($selected_group)
	read_persistent_var($selected_group)
	{ declare $i
	$i := 0
	while ($i <= $NUM_GROUPS-1)
		add_menu_item($selected_group, group_name($i), $i)
		inc($i)
	end while }

	declare ui_label $preset_label (3,1)
	set_text ($preset_label,"Select FX type")
	{ - MENU group presets Select end - }

	{ ---- Declare var for AHDSR and LFO_MULTI---- }
	declare $grp_idx
	$grp_idx := 0

	declare $env_idx
	$env_idx := find_mod($grp_idx, "ENV_VOL")

	declare $lfo_idx
	$lfo_idx := find_mod($grp_idx, "LFO_MULTI")

	{ - AHDSR - }
		{ ---- Custom Attack Slider ---- }
		declare ui_slider $Attack_sli(0, 1000000)
		set_control_par_str(get_ui_id($Attack_sli),$CONTROL_PAR_AUTOMATION_NAME,"Attack")
		set_knob_defval($Attack_sli,0)
		set_control_par_str(get_ui_id($Attack_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($Attack_sli),$CONTROL_PAR_PICTURE,"series1_Attack")
		set_control_par(get_ui_id($Attack_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)

		$Attack_sli := get_engine_par($ENGINE_PAR_ATTACK,$grp_idx,$env_idx,-1)
		set_control_par_str(get_ui_id($Attack_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_ATTACK,$grp_idx,$env_idx,-1) & " ms")

		make_persistent($Attack_sli)
		read_persistent_var($Attack_sli)

		{ ---- Custom Hold Slider ---- }
		declare ui_slider $Hold_sli(0, 1000000)
		set_control_par_str(get_ui_id($Hold_sli),$CONTROL_PAR_AUTOMATION_NAME,"Hold")
		set_knob_defval($Hold_sli,1000000)
		set_control_par_str(get_ui_id($Hold_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($Hold_sli),$CONTROL_PAR_PICTURE,"series1_Hold")
		set_control_par(get_ui_id($Hold_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)

		$Hold_sli := get_engine_par($ENGINE_PAR_HOLD,$grp_idx,$env_idx,-1)
		set_control_par_str(get_ui_id($Hold_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_HOLD,$grp_idx,$env_idx,-1) & " ms")

		make_persistent($Hold_sli)
		read_persistent_var($Hold_sli)

		{ ---- Custom Decay Slider ---- }
		declare ui_slider $Decay_sli(0, 1000000)
		set_control_par_str(get_ui_id($Decay_sli),$CONTROL_PAR_AUTOMATION_NAME,"Decay")
		set_knob_defval($Decay_sli,1000000)
		set_control_par_str(get_ui_id($Decay_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($Decay_sli),$CONTROL_PAR_PICTURE,"series1_Decay")
		set_control_par(get_ui_id($Decay_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)

		$Decay_sli := get_engine_par($ENGINE_PAR_DECAY,$grp_idx,$env_idx,-1)
		set_control_par_str(get_ui_id($Decay_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_DECAY,$grp_idx,$env_idx,-1) & " ms")

		make_persistent($Decay_sli)
		read_persistent_var($Decay_sli)

		{ ---- Custom Sustain Slider ---- }
		declare ui_slider $Sustain_sli(0, 1000000)
		set_control_par_str(get_ui_id($Sustain_sli),$CONTROL_PAR_AUTOMATION_NAME,"Sustain")
		set_knob_defval($Sustain_sli,1000000)
		set_control_par_str(get_ui_id($Sustain_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($Sustain_sli),$CONTROL_PAR_PICTURE,"series1_Sustain")
		set_control_par(get_ui_id($Sustain_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)

		$Sustain_sli := get_engine_par($ENGINE_PAR_SUSTAIN,$grp_idx,$env_idx,-1)
		set_control_par_str(get_ui_id($Sustain_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_SUSTAIN,$grp_idx,$env_idx,-1) & " dB")

		make_persistent($Sustain_sli)
		read_persistent_var($Sustain_sli)

		{ ---- Custom Release Slider ---- }
		declare ui_slider $Release_sli(0, 1000000)
		set_control_par_str(get_ui_id($Release_sli),$CONTROL_PAR_AUTOMATION_NAME,"Release")
		set_knob_defval($Release_sli,500000)
		set_control_par_str(get_ui_id($Release_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($Release_sli),$CONTROL_PAR_PICTURE,"series1_Release")
		set_control_par(get_ui_id($Release_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)

		$Release_sli := get_engine_par($ENGINE_PAR_SUSTAIN,$grp_idx,$env_idx,-1)
		set_control_par_str(get_ui_id($Sustain_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_SUSTAIN,$grp_idx,$env_idx,-1) & " dB")

		make_persistent($Release_sli)
		read_persistent_var($Release_sli)
	{ - AHDSR end - }

	{ - EQ - }
		{ ---- Custom EQ Low Slider ---- }
		declare ui_slider $eqLow_sli(0, 1000000)
		set_knob_defval($eqLow_sli,500000)
		set_control_par_str(get_ui_id($eqLow_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($eqLow_sli),$CONTROL_PAR_PICTURE,"series2_Low")
		set_control_par(get_ui_id($eqLow_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($eqLow_sli), $ENGINE_PAR_GAIN1, 1)
		make_persistent($eqLow_sli)
		read_persistent_var($eqLow_sli)

		{ ---- Custom mid FREQ2 Slider ---- }
		declare ui_slider $eqFreq2_sli(0, 1000000)
		set_knob_defval($eqFreq2_sli,500000)
		set_control_par_str(get_ui_id($eqFreq2_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($eqFreq2_sli),$CONTROL_PAR_PICTURE,"series2_Mid-Freq")
		set_control_par(get_ui_id($eqFreq2_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($eqFreq2_sli), $ENGINE_PAR_FREQ2, 1)
		make_persistent($eqFreq2_sli)
		read_persistent_var($eqFreq2_sli)

		{ ---- Custom EQ mid Slider ---- }
		declare ui_slider $eqMid_sli(0, 1000000)
		set_knob_defval($eqMid_sli,500000)
		set_control_par_str(get_ui_id($eqMid_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($eqMid_sli),$CONTROL_PAR_PICTURE,"series2_Mid")
		set_control_par(get_ui_id($eqMid_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($eqMid_sli), $ENGINE_PAR_GAIN2, 1)
		make_persistent($eqMid_sli)
		read_persistent_var($eqMid_sli)

		{ ---- Custom EQ hi Slider ---- }
		declare ui_slider $eqHi_sli(0, 1000000)
		set_knob_defval($eqHi_sli,500000)
		set_control_par_str(get_ui_id($eqHi_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($eqHi_sli),$CONTROL_PAR_PICTURE,"series2_Hi")
		set_control_par(get_ui_id($eqHi_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($eqHi_sli), $ENGINE_PAR_GAIN3, 1)
		make_persistent($eqHi_sli)
		read_persistent_var($eqHi_sli)
	{ - EQ end - }

	{ - Cutoff Filter - }
		{ ---- Custom Cutoff_LP Slider ---- }
		declare ui_slider $Cutoff_LP_sli(0, 1000000)
		set_control_par_str(get_ui_id($Cutoff_LP_sli),$CONTROL_PAR_AUTOMATION_NAME,"Cutoff_LP")
		set_knob_defval($Cutoff_LP_sli,1000000)
		set_control_par_str(get_ui_id($Cutoff_LP_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($Cutoff_LP_sli),$CONTROL_PAR_PICTURE,"series7_cutoffLP_rp")
		set_control_par(get_ui_id($Cutoff_LP_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)
		set_control_par(get_ui_id($Cutoff_LP_sli), $ENGINE_PAR_CUTOFF, 1)
		make_persistent($Cutoff_LP_sli)
		read_persistent_var($Cutoff_LP_sli)

		{ ---- Custom Resonance Slider ---- }
		declare ui_slider $resonance_sli(0, 1000000)
		set_control_par_str(get_ui_id($resonance_sli),$CONTROL_PAR_AUTOMATION_NAME,"Resonance")
		set_knob_defval($resonance_sli,500000)
		set_control_par_str(get_ui_id($resonance_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($resonance_sli),$CONTROL_PAR_PICTURE,"series7_resonance_rp")
		set_control_par(get_ui_id($resonance_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)
		set_control_par(get_ui_id($resonance_sli), $ENGINE_PAR_RESONANCE, 1)
		make_persistent($resonance_sli)
		read_persistent_var($resonance_sli)
	{ - Cutoff Filter end - }

	{ - Tuning - }
		{ ---- Custom Tuning Slider ---- }
		declare ui_slider $tune_sli(490000, 510000)
		set_control_par_str(get_ui_id($tune_sli),$CONTROL_PAR_AUTOMATION_NAME,"Tuning")
		set_knob_defval($tune_sli,500000)
		set_control_par_str(get_ui_id($tune_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($tune_sli),$CONTROL_PAR_PICTURE,"series6_fine-tune_rp")
		set_control_par(get_ui_id($tune_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)
		set_control_par(get_ui_id($tune_sli), $ENGINE_PAR_TUNE, 1)
		make_persistent($tune_sli)
		read_persistent_var($tune_sli)
	{ - Tuning end - }

	{ - Panning (sine/freq) - }
		{ ---- Custom panSpeed Slider ---- }
		declare ui_slider $panSpeed_sli(0, 1000000)
		set_control_par_str(get_ui_id($panSpeed_sli),$CONTROL_PAR_AUTOMATION_NAME,"Pan-Speed")
		set_knob_defval($panSpeed_sli,500000)
		set_control_par_str(get_ui_id($panSpeed_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($panSpeed_sli),$CONTROL_PAR_PICTURE,"series5_pan-speed_rp")
		set_control_par(get_ui_id($panSpeed_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)

		$panSpeed_sli := get_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,$grp_idx,$lfo_idx,-1)
		set_control_par_str(get_ui_id($panSpeed_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_INTMOD_FREQUENCY,$grp_idx,$lfo_idx,-1) & " Hz")

		make_persistent($panSpeed_sli)
		read_persistent_var($panSpeed_sli)

		{ ---- Custom panDepth Slider ---- }
		declare ui_slider $panDepth_sli(500000, 1000000)
		set_control_par_str(get_ui_id($panDepth_sli),$CONTROL_PAR_AUTOMATION_NAME,"Pan-Depth")
		set_knob_defval($panDepth_sli,0)
		set_control_par_str(get_ui_id($panDepth_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($panDepth_sli),$CONTROL_PAR_PICTURE,"series5_pan-depth_rp")
		set_control_par(get_ui_id($panDepth_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-400)

		$panDepth_sli := get_engine_par($ENGINE_PAR_LFO_SINE,$grp_idx,$lfo_idx,-1)
		set_control_par_str(get_ui_id($panDepth_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_LFO_SINE,$grp_idx,$lfo_idx,-1) & " ")

		make_persistent($panDepth_sli)
		read_persistent_var($panDepth_sli)
	{ - Panning (sine/freq) end - }

	{ - chorus - }
		{ ---- Chorus Switch ---- }
	    declare ui_switch $ChorusSw
		set_control_par_str(get_ui_id($ChorusSw),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($ChorusSw),$CONTROL_PAR_PICTURE,"series4_chorusSW_rp")
	    make_persistent($ChorusSw)
	    set_control_par(get_ui_id($ChorusSw), $CONTROL_PAR_HEIGHT, 64)
		set_control_par(get_ui_id($ChorusSw), $CONTROL_PAR_WIDTH, 64)

		{ ---- Custom Chorus Mix Slider ---- }
		declare ui_slider $ChorusMix(0, 400000)
		set_knob_defval($ChorusMix,0)
		set_control_par_str(get_ui_id($ChorusMix),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($ChorusMix),$CONTROL_PAR_PICTURE,"series3_DelayWet")
		set_control_par(get_ui_id($ChorusMix),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($ChorusMix), $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, 1)
		make_persistent($ChorusMix)
		read_persistent_var($ChorusMix)

		{ ---- Custom Chorus Depth Slider ---- }
		declare ui_slider $chDepth_sli(1000, 1000000)
		set_knob_defval($chDepth_sli,0)
		set_control_par_str(get_ui_id($chDepth_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($chDepth_sli),$CONTROL_PAR_PICTURE,"series3_depth_rp")
		set_control_par(get_ui_id($chDepth_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($chDepth_sli), $ENGINE_PAR_CH_DEPTH, 1)
		make_persistent($chDepth_sli)
		read_persistent_var($chDepth_sli)

		{ ---- Custom Chorus Speed Slider ---- }
		declare ui_slider $chSpeed_sli(1000, 1000000)
		set_knob_defval($chSpeed_sli,0)
		set_control_par_str(get_ui_id($chSpeed_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($chSpeed_sli),$CONTROL_PAR_PICTURE,"series3_speed_rp")
		set_control_par(get_ui_id($chSpeed_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($chSpeed_sli), $ENGINE_PAR_CH_SPEED, 1)
		make_persistent($chSpeed_sli)
		read_persistent_var($chSpeed_sli)
	{ - chorus end - }

	{ - delay - }
		{ ---- Delay Switch ---- }
	    declare ui_switch $delaySw
		set_control_par_str(get_ui_id($delaySw),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($delaySw),$CONTROL_PAR_PICTURE,"series4_Delay_sw")
	    make_persistent($delaySw)
	    set_control_par(get_ui_id($delaySw), $CONTROL_PAR_HEIGHT, 64)
		set_control_par(get_ui_id($delaySw), $CONTROL_PAR_WIDTH, 64)

		{ ---- Custom Delay Mix Slider ---- }
		declare ui_slider $delayMix(0, 600000)
		set_knob_defval($delayMix,0)
		set_control_par_str(get_ui_id($delayMix),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($delayMix),$CONTROL_PAR_PICTURE,"series3_DelayWet")
		set_control_par(get_ui_id($delayMix),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($delayMix), $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, 1)
		make_persistent($delayMix)
		read_persistent_var($delayMix)

		{ ---- Custom Delay Time Slider ---- }
		declare ui_slider $dlTime_sli(1000, 1000000)
		set_knob_defval($dlTime_sli,0)
		set_control_par_str(get_ui_id($dlTime_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($dlTime_sli),$CONTROL_PAR_PICTURE,"series3_DelayTime")
		set_control_par(get_ui_id($dlTime_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($dlTime_sli), $ENGINE_PAR_DL_TIME, 1)
		make_persistent($dlTime_sli)
		read_persistent_var($dlTime_sli)

		{ ---- Custom Delay Time Slider ---- }
		declare ui_slider $dlFback_sli(1000, 1000000)
		set_knob_defval($dlFback_sli,0)
		set_control_par_str(get_ui_id($dlFback_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($dlFback_sli),$CONTROL_PAR_PICTURE,"series3_DelayFeedback")
		set_control_par(get_ui_id($dlFback_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($dlFback_sli), $ENGINE_PAR_DL_FEEDBACK, 1)
		make_persistent($dlFback_sli)
		read_persistent_var($dlFback_sli)
	{ - delay end - }

	{ - cabinet - }
		{ ---- Cabinet Switch ---- }
	    declare ui_switch $CabinetSw
		set_control_par_str(get_ui_id($CabinetSw),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($CabinetSw),$CONTROL_PAR_PICTURE,"series4_cabSW_rp")
	    make_persistent($CabinetSw)
	    set_control_par(get_ui_id($CabinetSw), $CONTROL_PAR_HEIGHT, 48)
		set_control_par(get_ui_id($CabinetSw), $CONTROL_PAR_WIDTH, 48)
	{ - Cabinet end - }

	{ - KOTOize - }
		{ ---- Custom KOTOize Switch ---- }
		declare ui_switch $KOTOizeSw
		set_control_par_str(get_ui_id($KOTOizeSw),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($KOTOizeSw),$CONTROL_PAR_PICTURE,"series4_koto_izeSW_rp")
	    make_persistent($KOTOizeSw)
	    set_control_par(get_ui_id($KOTOizeSw), $CONTROL_PAR_HEIGHT, 48)
		set_control_par(get_ui_id($KOTOizeSw), $CONTROL_PAR_WIDTH, 48)
	{ - KOTOize end - }
	
	{ - stereo - }	
		{ ---- stereo Switch ---- }
	    declare ui_switch $StereoSw
		set_control_par_str(get_ui_id($StereoSw),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($StereoSw),$CONTROL_PAR_PICTURE,"series4_stereoSW_rp")
	    make_persistent($StereoSw)
	    set_control_par(get_ui_id($StereoSw), $CONTROL_PAR_HEIGHT, 48)
		set_control_par(get_ui_id($StereoSw), $CONTROL_PAR_WIDTH, 48)
	{ - stereo end - }

	{ - reverb - }
		{ ---- Reverb Switch ---- }
	    declare ui_switch $reverbSw
		set_control_par_str(get_ui_id($reverbSw),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($reverbSw),$CONTROL_PAR_PICTURE,"series4_reverbSW_rp")
	    make_persistent($reverbSw)
	    set_control_par(get_ui_id($reverbSw), $CONTROL_PAR_HEIGHT, 64)
		set_control_par(get_ui_id($reverbSw), $CONTROL_PAR_WIDTH, 64)

		{ ---- Custom Reverb Mix Slider ---- }
		declare ui_slider $reverbMix(0, 600000)
		set_knob_defval($reverbMix,0)
		set_control_par_str(get_ui_id($reverbMix),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($reverbMix),$CONTROL_PAR_PICTURE,"series3_DelayWet")
		set_control_par(get_ui_id($reverbMix),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($reverbMix), $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, 1)
		make_persistent($reverbMix)
		read_persistent_var($reverbMix)

		{ ---- Custom Reverb preDelay Slider ---- }
		declare ui_slider $revPreDL_sli(1000, 1000000)
		set_knob_defval($revPreDL_sli,0)
		set_control_par_str(get_ui_id($revPreDL_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($revPreDL_sli),$CONTROL_PAR_PICTURE,"series3_preDelay_rp")
		set_control_par(get_ui_id($revPreDL_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($revPreDL_sli), $ENGINE_PAR_IRC_PREDELAY, 1)
		make_persistent($revPreDL_sli)
		read_persistent_var($revPreDL_sli)

		{ ---- Custom Reverb IR_Size Slider ---- }
		declare ui_slider $IRsize_sli(1000, 1000000)
		set_knob_defval($IRsize_sli,500000)
		set_control_par_str(get_ui_id($IRsize_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($IRsize_sli),$CONTROL_PAR_PICTURE,"series3_IRsize_rp")
		set_control_par(get_ui_id($IRsize_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($IRsize_sli), $ENGINE_PAR_IRC_LENGTH_RATIO_LR, 1)
		make_persistent($IRsize_sli)
		read_persistent_var($IRsize_sli)

		{ ---- Custom Reverb lowPass Slider ---- }
		declare ui_slider $IR_LP_sli(1000, 1000000)
		set_knob_defval($IR_LP_sli,1000000)
		set_control_par_str(get_ui_id($IR_LP_sli),$CONTROL_PAR_TEXT,"")
		set_control_par_str(get_ui_id($IR_LP_sli),$CONTROL_PAR_PICTURE,"series3_IR-LP_rp")
		set_control_par(get_ui_id($IR_LP_sli),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
		set_control_par(get_ui_id($IR_LP_sli), $ENGINE_PAR_IRC_FREQ_LOWPASS_LR, 1)
		make_persistent($IR_LP_sli)
		read_persistent_var($IR_LP_sli)
	{ - reverb end - }

	{ ---- interval ---- }
		declare !interval_names[14]
		!interval_names[0] := "Unison"
		!interval_names[1] := "mi 2nd"
		!interval_names[2] := "2nd"
		!interval_names[3] := "mi 3rd"
		!interval_names[4] := "3rd"
		!interval_names[5] := "4th"
		!interval_names[6] := "+ 4th"
		!interval_names[7] := "5th"
		!interval_names[8] := "mi 6th"
		!interval_names[9] := "6th"
		!interval_names[10] := "mi 7th"
		!interval_names[11] := "7th"
		!interval_names[12] := "8ve"
		
		declare $new_note
		declare $new_velocity
		declare $new_id

		declare ui_label $interval_label (3,1)
		set_text ($interval_label,"Interval")
		
	 	declare ui_knob $interval_knob(-12,12,1)
		set_text ($interval_knob,"Interval")
		set_knob_defval($interval_knob,0)
		$interval_knob := 7
		set_knob_label($interval_knob,!Interval_names[abs($interval_knob)])			
		make_persistent($interval_knob)
		set_control_help ($interval_knob,"Interval: Sets the interval of the second note.")
		
		declare ui_knob $octave_knob(-10,10,1)
		set_text ($octave_knob,"Octave")
		set_knob_unit($octave_knob,$KNOB_UNIT_OCT)
		set_knob_defval($octave_knob,0)
		$octave_knob := 0
		make_persistent($octave_knob)
		set_control_help ($octave_knob,"Octave: Sets the octave offset of the second note.")
		
		declare ui_knob $velocity_knob(1,200,1)
		set_text ($velocity_knob,"Velocity")
		set_knob_unit($velocity_knob,$KNOB_UNIT_PERCENT)
		set_knob_defval($velocity_knob,100)
		$velocity_knob := 100
		make_persistent($velocity_knob)
		set_control_help ($velocity_knob,"Velocoty: Sets the velocity of the second note as a percentage of the played velocity.")
		
		_read_persistent_var($interval_knob)
		set_knob_label($interval_knob,!Interval_names[abs($interval_knob)])

	{ ---- interval end ---- }

	{ ---- Portamento ---- }
		declare $count

		declare ui_value_edit $MIN_KEY (0,127,0)
		set_control_help ($MIN_KEY,"Sets the keyrange for the entire <Unisono - Portamento> module, e.g. useful when keyswitch notes should not be affected.")
		declare ui_value_edit $MAX_KEY (0,127,0)
		set_control_help ($MAX_KEY,"Sets the keyrange for the entire <Unisono - Portamento> module, e.g. useful when keyswitch notes should not be affected.")
		
		$MIN_KEY := 0
		$MAX_KEY := 127
		make_persistent($MIN_KEY)
		make_persistent($MAX_KEY)
		
		set_text($MIN_KEY,"Min")
		set_text($MAX_KEY,"Max")
		
		{CAN BE DELETED?}
		declare const $Dynamic := 0 
		declare const $hum_Velocity := 0
		declare const $hum_Volume := 0
		declare const $hum_Tuning := 0
		declare const $hum_Pan := 0
		declare const $key_knob := 0
		declare const $AmountPorta := 0
		{ declare $helper_tune }
		
	    
	    { SET_CONDITION(NO_SYS_SCRIPT_PEDAL) } {disabled to allow sustain for other FXscripts}

		declare const $SPREAD_OPT := 0
		declare const $VOL_REDUCE := -1000
		
		declare const $TUNE_MAX := 100000    
		declare const $UNISONO_TUNE_MODE := 0
		
		declare const $FADE_OUT_DEFAULT := 10000
		declare const $FADE_OUT_PIANO := 15000
		
		{GUI CONTROLS}
		
		declare ui_button $Expert
		move_control_px($Expert,6000,2000)
		set_control_help($Expert,"Expert: Click to access the expert view.")
		
		{DEFAULT VIEW}
		
			{MONO }
			
			declare ui_label $mono_label(3,1)
			declare ui_knob $mono_mode_knob (0,3,1)
			declare ui_button $mono_key_up_button
		
			declare ui_menu $mono_prio_menu
			declare ui_label $mono_prio_label (1,1)
			
			{PORTAMENTO }
			declare ui_label $portamento_label(3,1)
			declare ui_knob $portamento_knob (0,2,1)
			declare ui_knob $porta_combi_knob (0,127,1)
{ 			declare ui_knob $porta_rel_knob (0,127,1)
			declare ui_knob $porta_abs_knob (0,127,1) }
			declare ui_button $porta_rel_glide_button
			
			{UNISONO }
			
			declare ui_label $uni_label(3,1)
			declare ui_knob $uni_voices_knob (1,8,1)
			declare ui_knob $uni_detune_knob (0,100,1)
			declare ui_knob $uni_spread_knob (0,100,1)
	    
			{ARRAY WITH IDs OF DEFAULT VIEW}
			
			declare const $NUM_DEFAULT_VIEW := 13
			
			declare %default_view_id[$NUM_DEFAULT_VIEW]
			%default_view_id[0] := get_ui_id($mono_label)
			%default_view_id[1] := get_ui_id($mono_mode_knob)
			%default_view_id[2] := get_ui_id($mono_key_up_button)
			%default_view_id[3] := get_ui_id($mono_prio_menu)
			%default_view_id[4] := get_ui_id($mono_prio_label)
			
			%default_view_id[5] := get_ui_id($portamento_label)
			%default_view_id[6] := get_ui_id($portamento_knob)
			%default_view_id[7] := get_ui_id($porta_combi_knob)
			%default_view_id[8] := get_ui_id($porta_rel_glide_button)
			%default_view_id[9] := get_ui_id($uni_label)
			
			%default_view_id[10] := get_ui_id($uni_voices_knob)
			%default_view_id[11] := get_ui_id($uni_detune_knob)
			%default_view_id[12] := get_ui_id($uni_spread_knob)
	    

		{EXPERT VIEW}
		
			{Mono Options}
			declare ui_label $mono_options_label (6,1)
			declare ui_label $mono_amp_rel_label (1,1)
			declare ui_button $mono_amp_rel_button
			declare ui_label $mono_leg_label (1,1)
			declare ui_menu $mono_leg_menu
			declare ui_label $mono_sus_label (1,1)
			declare ui_menu $mono_sus_menu
			declare ui_label $mono_retrig_velo_label (1,1)
			declare ui_menu $mono_retrig_velo_menu
			
			declare ui_knob $mono_fade_out_knob (0,2000,1)
			declare ui_knob $mono_fade_in_knob (0,2000,1)
			
			{Voice Management}
			
			declare ui_label $voice_options_label (4,1)
			declare ui_label $voice_man_label (1,1)
			declare ui_label $voice_keyclick_label (1,1)
			declare ui_menu $voice_keyclick_menu
			declare ui_menu $voice_menu
			declare ui_knob $voice_fade_sw_knob (0,2000,1000)
			declare ui_knob $voice_fade_synth_out_knob (0,2000,1000)
			declare ui_label $keyrange_label (1,1)
			
			declare ui_label $det_label (1,1)
			set_text($det_label,"Chord Detection:")
			declare ui_value_edit $det (0,100,1)
			set_text($det,"Time")
			set_control_help ($det,"Chord Detection Time: Sets the chord detection time in milliseconds. Notes received in that time period will be considered as a single chord. The mono and portamento functionality will work on this complete chord as opposed to one note only.")
			$det := 0
			
			{ARRAY WITH IDs OF EXPERT VIEW}
			
			declare const $NUM_EXPERT_VIEW := 23
			
			declare %expert_view_id[$NUM_EXPERT_VIEW]
			%expert_view_id[0] := get_ui_id($mono_amp_rel_label)
			%expert_view_id[1] := get_ui_id($mono_amp_rel_button)
			%expert_view_id[2] := get_ui_id($mono_leg_label)
			%expert_view_id[3] := get_ui_id($mono_leg_menu)
			%expert_view_id[4] := get_ui_id($mono_sus_label)
			%expert_view_id[5] := get_ui_id($mono_sus_menu)
			%expert_view_id[6] := get_ui_id($mono_retrig_velo_label)
			%expert_view_id[7] := get_ui_id($mono_retrig_velo_menu)
			%expert_view_id[8] := get_ui_id($voice_man_label)
			%expert_view_id[9] := get_ui_id($voice_keyclick_label)
			%expert_view_id[10] := get_ui_id($voice_keyclick_menu)
			%expert_view_id[11] := get_ui_id($voice_menu)
			%expert_view_id[12] := get_ui_id($voice_fade_sw_knob)
			%expert_view_id[13] := get_ui_id($voice_fade_synth_out_knob)
			%expert_view_id[14] := get_ui_id($mono_fade_in_knob)
			%expert_view_id[15] := get_ui_id($mono_fade_out_knob)
			%expert_view_id[16] := get_ui_id($mono_options_label)
			%expert_view_id[17] := get_ui_id($voice_options_label)
			%expert_view_id[18] := get_ui_id($keyrange_label)
			%expert_view_id[19] := get_ui_id($MIN_KEY)
			%expert_view_id[20] := get_ui_id($MAX_KEY)
			%expert_view_id[21] := get_ui_id($det)
			%expert_view_id[22] := get_ui_id($det_label)
		   
		   
			{Positioning of Expert View}
			
			move_control ($mono_options_label,1,3)
			
			move_control($mono_retrig_velo_label,1,4)
			move_control($mono_retrig_velo_menu,1,5)
			move_control($mono_amp_rel_label,2,4)
			move_control($mono_amp_rel_button,2,5)
			move_control($mono_sus_label,3,4)
			move_control($mono_sus_menu,3,5)
			move_control($mono_leg_label,4,4)
			move_control($mono_leg_menu,4,5)
			move_control($mono_fade_in_knob,6,4)
			move_control($mono_fade_out_knob,5,4)
			
			move_control ($voice_options_label,1,7)
			move_control($voice_man_label,1,8)
			move_control($voice_menu,1,9)
			move_control ($voice_keyclick_label,2,8)
			move_control ($voice_keyclick_menu,2,9)
			move_control ($voice_fade_sw_knob,2,8)
			move_control ($voice_fade_synth_out_knob,2,8)
		
			move_control ($keyrange_label,5,7)
			move_control ($MIN_KEY,5,8)
			move_control ($MAX_KEY,5,9)
			move_control ($det_label,6,7)
			move_control ($det,6,8)
			
			{Hide Expert View by default}
			
			$count := 0
			while ($count < $NUM_EXPERT_VIEW)
				set_control_par(%expert_view_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
	   
		set_text($mono_mode_knob,"Mode")
		make_persistent($mono_mode_knob)
		set_control_help ($mono_mode_knob,"Mono Mode: Choose among three mono modes: <On> will always trigger a new sample, <Legato> does not trigger new samples. <Offset> will trigger a new sample with a sample start offset, determined by the length of the previous held note. <Offset> only works in sampler mode!") 
		
		declare !mode_name [4]
		!mode_name[0] := "Off"
		!mode_name[1] := "On"
		!mode_name[2] := "Legato"
		!mode_name[3] := "Offset"
		
		set_text ($mono_options_label,"Mono Mode - Expert Settings")
		set_text ($voice_options_label,"Settings for repeated notes with held sustain pedal:")
		set_text ($keyrange_label,"Key Range:")
		
		set_text ($portamento_knob,"Mode")
		set_control_help ($portamento_knob,"Portamento Mode: Choose among two portamento modes. When <Auto> is selected, only legato played notes will be played portamento.")
		make_persistent($portamento_knob)
		
		declare !Portamento_knob_name [3]
		!Portamento_knob_name[0] := "Off"
		!Portamento_knob_name[1] := "On"
		!Portamento_knob_name[2] := "Auto"
		
		declare %pressed_id[128]
		declare %pressed_velo[128]
		declare %last_id[128]
		declare %last2_id[128]
		declare %hold_arr[128]
		declare %sos_state[128]
		declare %rel_id[128]
		declare %id_arr[512]
		declare %note_arr[512]
		declare %velo_arr[512]
		declare %time_arr[512]
		declare $cursor
		declare $hold_nr

		declare $func_cc_note_off
		declare $flag_nr_cc
		declare $event_kill_mode
		declare %last_cc[128]

		declare $mono_nr
		declare $MAX_MONO_NR := 2
		declare $a
		
		
		add_menu_item($mono_leg_menu,"Off",-1)
		$a := 0
		while($a < $NUM_GROUPS)
			if (_get_engine_par($ENGINE_PAR_RELEASE_TRIGGER,$a,0,-1) = 0)
				add_menu_item($mono_leg_menu,group_name($a),$a)
			end if
			inc($a)
		end while
		make_persistent($mono_leg_menu)


		add_menu_item($mono_sus_menu,"Off",-1)
		$a := 0
		while($a < $NUM_GROUPS)
			if (_get_engine_par($ENGINE_PAR_RELEASE_TRIGGER,$a,0,-1) = 0)
				add_menu_item($mono_sus_menu,group_name($a),$a)
			end if
			inc($a)
		end while
		make_persistent($mono_sus_menu)
		
		declare $helper
		declare $helper2
		declare $help_id
		declare $kill_index
		declare $make_change_tune
		declare $last_note_helper := -1
		declare $last_note := -1
		declare $portamento 
		declare $ziel_pos
		declare $vol_helper
		declare $auto
		declare $b
		declare polyphonic $poly_tune_diff
		declare polyphonic $poly_cur_diff
		declare polyphonic $poly_interv
		declare polyphonic $poly_id
		declare polyphonic $poly_direction
		declare polyphonic $poly_checker
		declare $loop_counter
		declare %fadeid_arr[512]
		declare %fadenote_arr[512]
		declare %fade_checker[128]
		declare $fade_cursor
		declare $tune_diff
		declare $cur_diff
		declare $cur_pos := 6000000
		declare $interv
		declare $direction
		declare $this_id
		declare $note_length := 10000
		declare $mono_start_time
		declare $sample_offset
		
		
		set_text ($mono_label,"Mono Mode")
		set_text ($portamento_label,"Portamento")
		set_text ($uni_label,"Unisono")
		
		set_text($voice_man_label,"Select Type:")
		set_control_help ($voice_man_label,"Voice Management: Choose among four different voice management types. The different voice management types define what happens with repeated notes while the sustain pedal is held.")
		set_text($mono_prio_label,"Note Priority:")
		set_control_help ($mono_prio_label,"Note Priority: Defines which note is played when releasing a key, while a different note is held. Only availabe when <Key-Up Action> is set to <Trigger Note>.") 
		
		set_text($mono_amp_rel_label,"Amp Release:")
		set_control_help ($mono_amp_rel_label,"Play Release: When enabled, the release part of the ADSR will always be played, i.e. legato played notes will receive a note off as opposed to be faded out.")
		
		set_text ($mono_key_up_button,"Key-Up Trigger")
		set_control_help ($mono_key_up_button,"Key-Up Trigger: if activated, notes are triggered upon release while other notes aref being held.")
		
		set_text($mono_retrig_velo_label,"Retrigger Velo:")
		set_control_help ($mono_retrig_velo_label,"Retrigger Velo: Defines the velocity of the retriggered note when <Key-Up Action> is set to <Trigger Note>.") 

		
		set_control_help ($mono_sus_menu,"1st Note Group: Sets the group for the first played note.")
		set_control_help ($mono_leg_menu,"Legato Group: Sets the group for the legato played notes.") 
		
		set_text($mono_sus_label,"1st Note Group:")
		set_control_help ($mono_sus_label,"1st Note Group: Sets the group for the first played note.") 


		set_text($mono_leg_label,"Legato Group")
		set_control_help ($mono_leg_label,"Legato Group: Sets the group for the legato played notes.") 
		
		set_text($voice_fade_synth_out_knob,"Fade")
		set_control_help ($voice_fade_synth_out_knob,"Fade Out: Specifies the fade out time of repeated notes while the sustain pedal is being held.")
		
		set_text($porta_combi_knob,"Time")
		declare $GlideRel := 200
		$porta_combi_knob := 64
		set_control_help ($porta_combi_knob,"Time: Sets the glide time between notes when Portamento is on. With <Relative> enabled, the glide time will increase with the note interval, otherwise the glide time will stay constant regardless of the interval.")
		declare $GlideAbs := 500

		
		declare $fade_sw := 50000
		$voice_fade_sw_knob := $fade_sw/1000
		set_text($voice_fade_sw_knob,"X Fade")
		set_control_help ($voice_fade_sw_knob,"X Fade: Specifies the crossfade time between retriggered notes.")

		
		declare $fade_synth_out := 50000
		$voice_fade_synth_out_knob := $fade_synth_out/1000
		
		$mono_key_up_button := 1
		
		set_text($mono_fade_out_knob,"Fade Out")
		$mono_fade_out_knob := 0
		set_control_help ($mono_fade_out_knob,"Fade Out: Sets the fade out time of previous notes. Only works when <Vol Env Release> is disabled.")

		declare $Fadeout := 10

		
		set_text($mono_fade_in_knob,"Fade In")
		$mono_fade_in_knob := 0
		set_control_help ($mono_fade_in_knob,"Fade In: Sets the fade in time of new notes. Only works when <Vol Env Release> is disabled.")

		declare $Fadein := 10
		
		declare $ALLOWED_NOTE_NR := 10000
		declare $ALLOWED_event_NR := 10000
			
		set_control_help ($porta_rel_glide_button,"Relative: When selected, the glide time will increase with the interval.")
		
		
		set_text($porta_rel_glide_button,"Relative")
		$porta_rel_glide_button := 0
		
		declare $MaxHold := 1
		
		declare $auto_button
		declare $portamento_button
				
		
		add_menu_item($voice_menu,"Off",0)
		add_menu_item($voice_menu,"Type: Organ",1)
		add_menu_item($voice_menu,"Type: Strings",2)
		add_menu_item($voice_menu,"Type: Synth",3)
		add_menu_item($voice_menu,"Type: Piano",4)
		set_control_help ($voice_menu,"Choose among the following voice management types: Organ: Only notes of the <Key Click Group> will be retriggered. Strings: Only one note per key will be played, the crossfade between two notes can be specified with the <Transition> knob.")

	   
	    add_menu_item($mono_prio_menu,"Last Note",1)
	    add_menu_item($mono_prio_menu,"Next Note",0)
	    add_menu_item($mono_prio_menu,"Low Note",2)
	    add_menu_item($mono_prio_menu,"High Note",3)
		$mono_prio_menu := 1
		set_control_help ($mono_prio_menu,"Note Priority: Defines which note is played when releasing a key, while a different note is held. Only availabe when <Key-Up Action> is set to <Trigger Note>.") 
		declare $last_prio_menu
		make_persistent($last_prio_menu)
		
		declare $mono_button

		$count := 0
		add_menu_item ($voice_keyclick_menu,"n/a",-1)
		while ($count < $NUM_GROUPS)
			add_menu_item ($voice_keyclick_menu,group_name($count),$count)
			inc ($count)
		end while
		set_control_help($voice_keyclick_menu," Key Click Group: Samples of this group will be retriggered.")
		
		
		set_text ($voice_keyclick_label,"Key Click Group:")
		set_control_help($voice_keyclick_label," Key Click Group: Samples of this group will be retriggered.")

	   
	    set_text($mono_amp_rel_button,"Vol Env Release")
	    set_control_help($mono_amp_rel_button,"Vol Env: When enabled, the release part of the ADSR will always be played, i.e. legato played notes will receive a note off as opposed to be faded out.")
	    
	    
	    add_menu_item ($mono_retrig_velo_menu, "First Note", 0)
	    add_menu_item ($mono_retrig_velo_menu, "Last Note", 1)
	    set_control_help ($mono_retrig_velo_menu,"Retrigger Velo: Defines the velocity of the retriggered note when <Key-Up Action> is set to <Trigger Note>.") 
		declare $last_velo_menu
		make_persistent($last_velo_menu)

		declare $legato_button

		set_text($uni_voices_knob,"Voices")
		set_control_help ($uni_voices_knob,"Voices: Adjusts the number of voices played when pressing a key.")
		
		$uni_detune_knob := 30
		set_text($uni_detune_knob,"Detune")
		set_knob_unit($uni_detune_knob,$KNOB_UNIT_PERCENT)
		set_control_help ($uni_detune_knob,"Detune: Adjusts the detuning between voices.")
		
		$uni_spread_knob := 70
		set_text($uni_spread_knob,"Spread")
		set_knob_unit($uni_spread_knob,$KNOB_UNIT_PERCENT)
		set_control_help ($uni_spread_knob,"Spread: Adjusts the panorama spreading between voices.")
		
		declare $mmin
		declare $mplus
		declare $mono 
		declare $last_mono
		declare $mono_id
		declare $last_mono_id
		declare $mono_note
		declare $mono_pos
		declare $virt_velo
		declare $legato
		declare %bad_retrigger_id[128]
		declare $bad_active
		declare %multi_id_arr[512]
		declare %multi_ix_array[512]
		declare %multi_note_arr[512]
		declare %multi_trans_arr[512]
		declare %multi_orig_id_arr[512]
		declare %multi_orig_note_arr[512]
		declare $multi_cursor
		declare %multi_func_para[512]
		declare %multi_func_id[512]
		declare %multi_func_type[512]
		declare $ma
		declare $n_helper
		declare $c
		declare $mf_cursor
		declare $multi_helper
		declare $ignore_multi
		declare %transp_array[512] := (0)
		declare %tuning_array[512]
		declare %pan_array[512]
		$uni_voices_knob := 1
		declare $int_voices
		declare polyphonic $no_release_callback
		declare polyphonic $exit_after_portamento
		declare $new_tune
		declare $new_vol
		declare $new_pan
		declare $new_velo := 1
		declare $new_time
		declare $multi_check_time
		declare $multi2_check_time
		declare $multi_check_id
		declare $multi_check_note
		declare $verschiebung
		declare $c_pan
		declare $orig_off_id
		
		
		
		make_persistent($det)
		make_persistent($uni_voices_knob)
		make_persistent($uni_detune_knob)
		make_persistent($uni_spread_knob)
		make_persistent($mono_retrig_velo_menu)
		make_persistent($voice_fade_synth_out_knob)
		make_persistent($fade_synth_out)
		make_persistent($mono_key_up_button)
		make_persistent($fadein)
		make_persistent($mono_fade_in_knob)
		make_persistent($fadeout)
		make_persistent($mono_fade_out_knob)
		
		make_persistent($voice_menu)
		make_persistent($MaxHold)
		make_persistent($mono_prio_menu)
		make_persistent($voice_fade_sw_knob)
		make_persistent($fade_sw)
		make_persistent($note_length)
		make_persistent($mono)
		make_persistent($mono_retrig_velo_menu)
		make_persistent($mono_amp_rel_button)
		make_persistent($mono_button)
		make_persistent($voice_keyclick_menu)
		make_persistent($legato_button)
		make_persistent($legato)
		make_persistent($Gliderel)
		make_persistent($porta_combi_knob)
		make_persistent($Glideabs)
		make_persistent($allowed_note_nr)
		make_persistent($allowed_event_nr)
		make_persistent($event_kill_mode)
		make_persistent($auto_button)
		make_persistent($auto)
		make_persistent($portamento_button)
		make_persistent($portamento)
		
		make_persistent($porta_rel_glide_button)
		make_persistent($portamento)
		make_persistent($mono_amp_rel_button)
		


		_read_persistent_var($voice_menu)
		_read_persistent_var($porta_rel_glide_button)
		
		
		
		_read_persistent_var($Glideabs)
		_read_persistent_var($porta_combi_knob)
		_read_persistent_var($fadein)
		_read_persistent_var($mono_fade_in_knob)
		_read_persistent_var($fadeout)
		_read_persistent_var($mono_fade_out_knob)
		if ($fadein < 1000)
			set_knob_label($mono_fade_in_knob,($fadein-10)/1000&"."&(($fadein-10) mod 1000)/100&(($fadein-10) mod 100)/10&" s")
		else
			set_knob_label($mono_fade_in_knob,($fadein-10)/1000&"."&(($fadein-10) mod 1000)/100&" s")	
		end if	
		if ($fadeout < 1000)
			set_knob_label($mono_fade_out_knob,($fadeout-10)/1000&"."&(($fadeout-10) mod 1000)/100&(($fadeout-10) mod 100)/10&" s")
		else
			set_knob_label($mono_fade_out_knob,($fadeout-10)/1000&"."&(($fadeout-10) mod 1000)/100&" s")	
		end if	
		_read_persistent_var($voice_fade_synth_out_knob)
		_read_persistent_var($fade_synth_out)
		$a := $voice_fade_synth_out_knob/10
		$fade_synth_out := ($a*$a*2000)/(200*200)
		if ($fade_synth_out < 1000)
			set_knob_label($voice_fade_synth_out_knob,$fade_synth_out/1000&"."&($fade_synth_out mod 1000)/100&($fade_synth_out mod 100)/10&" s")
		else
			set_knob_label($voice_fade_synth_out_knob,$fade_synth_out/1000&"."&($fade_synth_out mod 1000)/100&" s")	
		end if	
		$fade_synth_out := $fade_synth_out*1000
		_read_persistent_var($voice_fade_sw_knob)
		_read_persistent_var($fade_sw)
		$a := $voice_fade_sw_knob/10
		$fade_sw := ($a*$a*2000)/(200*200)
		if ($fade_sw < 1000)
			set_knob_label($voice_fade_sw_knob,$fade_sw/1000&"."&($fade_sw mod 1000)/100&($fade_sw mod 100)/10&" s")
		else
			set_knob_label($voice_fade_sw_knob,$fade_sw/1000&"."&($fade_sw mod 1000)/100&" s")	
		end if	
		$fade_sw := $fade_sw*1000
		_read_persistent_var($mono_mode_knob)
		set_knob_label($mono_mode_knob,!Mode_name[$mono_mode_knob])		
		_read_persistent_var($portamento_knob)
		set_knob_label($portamento_knob,!Portamento_knob_name[$portamento_knob])		
		_read_persistent_var($mono_button)
		_read_persistent_var($legato_button)
		_read_persistent_var($mono_key_up_button)
		_read_persistent_var($mono_amp_rel_button)
		if ($legato_button = 0)
			set_text($mono_amp_rel_label,"Amp Release:")
		else
			set_text($mono_amp_rel_label,"n/a")
		end if
		
		
		if ($mono_amp_rel_button = 0 and $legato_button = 0)
			set_text($mono_fade_out_knob,"Fade Out")	
			set_text($mono_fade_in_knob,"Fade In")	
		else
			set_text($mono_fade_out_knob,"n/a")	
			set_text($mono_fade_in_knob,"n/a")	
		end if

		{flags wich check current voice mangement options for the harmonized notes}
		declare $organ_block := 0
		declare $string_fade := 0
		declare $dynamic_maker := 0
		declare $test
		declare $orig_tune
		declare $orig_pan
		declare $orig_vol
		declare $orig_tune_2
		declare $orig_pan_2
		declare $orig_vol_2
		_read_persistent_var($porta_rel_glide_button)
		select ($porta_combi_knob)
			case 0 to 31
				$GlideRel := ($porta_combi_knob * 80)/32
			case 32 to 63
				$GlideRel := (($porta_combi_knob-32) * 120)/32 + 80
			case 64 to 95
				$GlideRel := (($porta_combi_knob-64) * 200)/32 + 200
			case 96 to 127
				$GlideRel := (($porta_combi_knob-96) * 2600)/31 +400
		end select
		$GlideAbs := ($porta_combi_knob*$porta_combi_knob*2000)/(127*127)
		{if ($porta_rel_glide_button = 1)
			set_knob_label($porta_combi_knob,$GlideRel)		
		else
			if ($GlideAbs < 1000)
				set_knob_label($porta_combi_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&($GlideAbs mod 100)/10&" s")
			else
				set_knob_label($porta_combi_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&" s")	
			end if	
		end if}
	{ ---- Portamento end ---- }

	{ ---- glideMono ---- }
	{ - thanks to NI user fizbin for sharing this}

		declare const $pitch_change_interval := 100
		declare $glide_on
		declare $currentnote_id
		declare $newnote_id
		declare $oldnote1_id
		declare $oldnote2_id
		declare $oldnote3_id
		declare $current_pitch
		declare $target_pitch
		declare $pitch_shift
		declare $actual_glide
		declare $interval_cents
		declare polyphonic $this_id_glideMono

		declare ui_knob $Glide(1000, 1000000, 1000000)
		declare ui_knob $Start (0, 1000000, 1000000)
		declare ui_knob $Scaling(100, 200, 100)
		declare ui_value_edit $Threshold(0, 127, 1)

		declare ui_label $glideMono_label (3,1)
		set_text ($glideMono_label,"glide Mono")
		
		$Glide := 0
		$Start := 5000 {only works in Sampler mode}
		$Scaling := 125 { the first octave interval is twice the glide time of no interval,
						the glide time for the 2nd octave interval is three times that of 
						no interval and so forth}
		$Threshold := 7 {Threshold is the interval at which scaling stops. If it is 7 (a fifth)
		 				then the glide time is no longer increased once a fifth up or down is 
		 				reached as the portamento interval.}

		make_persistent ($Start)
		make_persistent ($Glide)
		make_persistent ($Scaling)
		make_persistent ($Threshold)

		declare $dumdum
		$dumdum := 0
		make_persistent ($dumdum)
		
	{ ---- glideMono end ---- }

	{ ---- Microtuning ---- }
		declare const $ECO_MODE := 0
		declare const $TUNE_RANGE := 50

		declare $countMicro
		declare !note_class[12]
		!note_class[0] := "C"
		!note_class[1] := "Db"
		!note_class[2] := "D"
		!note_class[3] := "Eb"
		!note_class[4] := "E"
		!note_class[5] := "F"
		!note_class[6] := "Gb"
		!note_class[7] := "G"
		!note_class[8] := "Ab"
		!note_class[9] := "A"
		!note_class[10] := "Bb"
		!note_class[11] := "B"
		declare !note_namesMicro [128]
		$countMicro := 0
		while ($countMicro < 128)
			!note_namesMicro[$countMicro] := !note_class[$countMicro mod 12] & (($countMicro/12)-2)
			inc ($countMicro)
		end while

		declare $aMicro
		declare $bMicro
		declare %preset_store[12*14]
		make_persistent(%preset_store)
		declare %tune_factory[12*12]:= (...
		0,-29,  4, 16,-14, -2,-31,  2, 14,-16, 18,-12, {Pure } ...
		0,  5,  4, -2,-14,-29,-49,  2, 41,  6,-31,-12, {Overtone 16-32}...
		0, 14,  4, -5,  8, -2, 12,  2, 16,  6,  4, 10, {Pythagorean }...
		0,-10,  4, -6,  8, -2,  0,  2, -8,  6, -4, 10, {Pythagorean Middle}...
		0, 14,  4, 18,  8, 22, 12,  2, 16,  6, 20, 10, {Pythagorean Up}...
		0,-24, -7, 10, -14,  3,-21, -3,-27,-10,  7,-17, {Mean Tone 1/4}...
		0,  8,  3,  5, -7,  2,-10, -2,  7, -5,  3, -8, {Silbermann }...
		0,-10, -8, -6,-10, -2,-12, -4, -8,-12, -4, -8, {Werckmeister III}...
		0,-10, -7, -6,-14, -2,-12, -3, -8,-10, -4,-12, {Kirnberger III}...
		0, -6, -4, -4, -8, -2, -8, -2, -4, -6, -4, -8, {Neidhardt I}...
		0, -6, -4, -2, -8,  2, -8, -2, -4, -6,  0,-10, {Valotti } ...
		0,-10, -4, -6, -8, -2,-12, -2, -8, -6, -4, -8) {Young 1 / 6 pC }
		
		declare %helper_tune[12]
		make_persistent(%helper_tune)
		
		{--------UI Elements--------}
		
		declare ui_knob $Key_knobMicro(0,11,1)
		make_persistent($key_knobMicro)
		set_control_help ($Key_knobMicro,"Key: Sets the first scale degree.")
		
		declare ui_label $label (4,1)	
		{set_text ($label, "  C       Db       D       Eb        E        F       Gb       G       Ab       A       Bb       B")}
		hide_part ($label, $HIDE_PART_BG)

		declare ui_label $labelTitle(1, 1)
		set_text($labelTitle, "Microtuning")
		
		declare !key_label[12]
		!key_label[0] := "   B   "
		!key_label[1] := "   C   "
		!key_label[2] := "   Db   "
		!key_label[3] := "   D   "
		!key_label[4] := "   Eb   "
		!key_label[5] := "   E   "
		!key_label[6] := "   F   "
		!key_label[7] := "   Gb   "
		!key_label[8] := "   G   "
		!key_label[9] := "   Ab   "
		!key_label[10] := "   A   "
		!key_label[11] := "   Bb   "
		_read_persistent_var($key_knobMicro)
		set_text ($label,!key_label[(0+$key_knobMicro) mod 12]&""&...
		!key_label[(1+$key_knobMicro) mod 12]&""&...
		!key_label[(2+$key_knobMicro) mod 12]&""&...
		!key_label[(3+$key_knobMicro) mod 12]&""&...
		!key_label[(4+$key_knobMicro) mod 12]&""&...
		!key_label[(5+$key_knobMicro) mod 12]&""&...
		!key_label[(6+$key_knobMicro) mod 12]&""&...
		!key_label[(7+$key_knobMicro) mod 12]&""&...
		!key_label[(8+$key_knobMicro) mod 12]&""&...
		!key_label[(9+$key_knobMicro) mod 12]&""&...
		!key_label[(10+$key_knobMicro) mod 12]&""&...
		!key_label[(11+$key_knobMicro) mod 12])
		set_knob_label($key_knobMicro,!key_label[(0+$key_knobMicro) mod 12])
		set_text($key_knobMicro,"Key")
		
		declare ui_table %tune_ui[12](4,5,-$TUNE_RANGE)
		make_persistent (%tune_ui)
		set_control_help (%tune_ui,"Tuning Table: Adjust the detuning for each of the twelve notes.") 
		
		declare ui_knob $Preset (1,12,1)
		make_persistent ($Preset)
		set_control_help ($Preset,"Preset: Selects a tuning preset. Every change made to the tuning table is immediately written into the current preset location.")
		
		declare ui_menu $preset_menu
		add_menu_item($preset_menu,"Edit ...",100)
		add_menu_item($preset_menu,"--------",99)
		add_menu_item($preset_menu,"Copy Tuning",0)
		add_menu_item($preset_menu,"Paste Tuning",1)
		add_menu_item($preset_menu,"Clear Tuning",2)  
		add_menu_item($preset_menu,"----",99)
		add_menu_item($preset_menu,"Copy curr. Tuning to all Presets",3)
		add_menu_item($preset_menu,"-------------",99)
		add_menu_item($preset_menu,"Pure",4)
		add_menu_item($preset_menu,"Overtone 16-32",5)
		add_menu_item($preset_menu,"Pythagorean",6)
		add_menu_item($preset_menu,"Pythagorean Middle",7)
		add_menu_item($preset_menu,"Pythagorean Up",8)
		add_menu_item($preset_menu,"Mean Tone 1/4",9)
		add_menu_item($preset_menu,"Silbermann",10)
		add_menu_item($preset_menu,"Werkmeister III",11)
		add_menu_item($preset_menu,"Kirnberger III",12)
		add_menu_item($preset_menu,"Neidhardt I",13)
		add_menu_item($preset_menu,"Valotti",14)
		add_menu_item($preset_menu,"Young 1/6 pC",15)
		set_control_help ($preset_menu,"Edit Menu: Choose edit commands and/or factory preset tunings.")
		
		declare ui_knob $Amount (0,100,1)
		$Amount := 100
		set_knob_unit($Amount,$KNOB_UNIT_PERCENT)
		make_persistent($Amount)
		declare $helper_tune
		set_control_help ($Amount,"Amount: Adjusts the amount of the tuning. When set to 100%, each note is tuned to the cent value specified with the table. When set to 0%, no tuning is applied.") 		
	{ ---- Microtuning end ---- }

	{ ---- ARP ---- }
		declare const $REC_TIME := 30
		declare const $LATCH_TIME := 300
		declare const $LATCH_TIME_TRANS := 1000
		declare $repeat := 1 
		{if up/down: 1 = No Repeat, 2 = Repeat top, 3 = Repeat bottom, 5 = Repeat both}

		declare $latch_mode
		make_persistent($latch_mode)
		$latch_mode := 1
		
		declare $Str_Vel := 100
		declare $count_ARP := 0
		
		declare !note_class_ARP[12]
		!note_class_ARP[0] := "C"
		!note_class_ARP[1] := "Db"
		!note_class_ARP[2] := "D"
		!note_class_ARP[3] := "Eb"
		!note_class_ARP[4] := "E"
		!note_class_ARP[5] := "F"
		!note_class_ARP[6] := "Gb"
		!note_class_ARP[7] := "G"
		!note_class_ARP[8] := "Ab"
		!note_class_ARP[9] := "A"
		!note_class_ARP[10] := "Bb"
		!note_class_ARP[11] := "B"
		
		declare !note_names [128]
		$count_ARP := 0
		while ($count_ARP < 128)
			!note_names[$count_ARP] := !note_class_ARP[$count_ARP mod 12] & (($count_ARP/12)-2)
			inc ($count_ARP)
		end while
		
		declare ui_knob $Latch_knob (0,3,1)
		make_persistent($latch_knob)
		set_text($Latch_knob,"Mode")
		$latch_knob := 1
		_read_persistent_var($latch_mode)
		
		select ($latch_mode)
			case 0 
				set_knob_label($latch_knob,"Off")
			case 1 
				set_knob_label($latch_knob,"On")
			case 2
				set_knob_label($latch_knob,"Hold")
			case 3
				set_knob_label($latch_knob,"Hold +-")
		end select

		declare ui_knob $Dur (1, 200, 1)
		set_text($Dur,"Duration")
		set_knob_unit($Dur,$KNOB_UNIT_PERCENT)
		set_knob_defval($Dur,100)
		make_persistent($Dur)
		$Dur := 100

		declare ui_knob $Strike (1, 5, 1)
		make_persistent($Strike)
		$Strike := 1

		declare ui_value_edit $Steps (2,32, 1)
		make_persistent($Steps)
		$Steps := 16
		_read_persistent_var($steps)
		
		declare ui_table %rhythm[32] (2,2,100)
		make_persistent(%rhythm)
		
		declare ui_knob $Swing (-50,50,1)
		make_persistent($Swing)
		set_knob_unit($Swing,$KNOB_UNIT_PERCENT)
		$Swing := 0
		set_knob_defval($Swing,0)
			
		declare ui_knob $Octave (-6,6,1)
		make_persistent($Octave)
		$Octave := 0
		set_knob_defval($Octave,0)
		
		declare ui_menu $note_order
		add_menu_item ($note_order,"Select Note Order",99)
		add_menu_item ($note_order, "--------------",99)
		add_menu_item ($note_order, "As Played",1)
		add_menu_item ($note_order, "--------------",99)
		add_menu_item ($note_order, "Up",2)
		add_menu_item ($note_order, "Down",3)
		add_menu_item ($note_order, "Up & Down",4)
		add_menu_item ($note_order, "Down & Up",5)
		add_menu_item ($note_order, "--------------",99)
		add_menu_item ($note_order, "Zig-Zag Up",6)
		add_menu_item ($note_order, "Zig-Zag Down",7)
		add_menu_item ($note_order, "Zig-Zag Up-Dn",8)
		add_menu_item ($note_order, "Zig-Zag Dn-Up",9)
		add_menu_item ($note_order, "--------------",99)
		add_menu_item ($note_order, "Move in", 10)
		add_menu_item ($note_order, "Move out",11)
		add_menu_item ($note_order, "Move in & out",12)
		add_menu_item ($note_order, "Move out & in",13)
		add_menu_item ($note_order, "--------------",99)
		add_menu_item ($note_order, "Random",14)
		add_menu_item ($note_order, "Random (Urn)",15)
		add_menu_item ($note_order, "--------------",99)
		add_menu_item ($note_order, "All (Chord)",16)
		declare $last_note_order := 2
		$note_order := 2
		make_persistent($note_order)
		make_persistent($last_note_order)

		declare ui_switch $Velo_button
		set_control_par_str(get_ui_id($Velo_button),$CONTROL_PAR_TEXT,"Fix Velocity")
		make_persistent($Velo_button)
		
		declare ui_switch $midi_thru
		set_control_par_str(get_ui_id($midi_thru),$CONTROL_PAR_TEXT,"MIDI Thru")
		make_persistent($midi_thru)
		
		{**** from retrigger script*********}
		declare const $Tempo_knob_X := 4
		declare const $Tempo_knob_Y := 3
		
		declare @knob_name
		@knob_name := "Rate"
		
		declare !tempo_names[18]
		
		!tempo_names[0] := "1/128"
		!tempo_names[1] := "1/64"
		!tempo_names[2] := "1/32"
		!tempo_names[3] := "1/16 T"
		!tempo_names[4] := "3/64"
		!tempo_names[5] := "1/16"
		!tempo_names[6] := "1/8 T"
		!tempo_names[7] := "3/32"
		!tempo_names[8] := "1/8"
		!tempo_names[9] := "1/4 T"
		!tempo_names[10] := "3/16"
		!tempo_names[11] := "1/4"
		!tempo_names[12] := "1/2 T"
		!tempo_names[13] := "3/8"
		!tempo_names[14] := "1/2"
		!tempo_names[15] := "3/4"
		!tempo_names[16] := "4/4"
		!tempo_names[17] := "Bar"
		
		declare ui_knob $Rate_knob (0,1000000,1)
		set_text ($Rate_knob,"Rate")
		make_persistent ($Rate_knob)
		
		declare ui_knob $Sync_knob (0,17,1)
		set_text ($Sync_knob,@knob_name)
		$Sync_knob := 5
		set_knob_defval ($Sync_knob,5)
		set_knob_label ($Sync_knob,!tempo_names[$Sync_knob])
		make_persistent ($Sync_knob)
		
		declare $fill_buffer := 11
		make_persistent($fill_buffer)
		
		{**** from retrigger script*********}
		
		declare %pressed_id_ARP[128]
		declare %note_buffer[512]
		declare %ordered[128]
		declare %velo[128]
		declare $cursor_ARP
		declare $old_latch_time
		declare $a_ARP
		declare $aa
		declare $sema
		declare $rand
		declare $bb
		declare $b_ARP
		declare $loop_cursor
		declare %loop_buffer[512]
		declare $id
		declare $check_id
		declare $min
		declare $min_note
		declare $max_note
		declare $helper_ARP
		declare %help_buffer[512]
		declare $step_length
		declare $strike_count
		declare $duration
		declare $note
		declare $velo
		declare $act_step
		declare $last_order
		declare $oct_cursor
		declare $swing_cursor
		
		declare const $PRESET_LENGTH := 43
		
		declare ui_menu $edit_preset
		add_menu_item($edit_preset,"Select Preset...",100)
		add_menu_item($edit_preset,"--------------",99)
		
		declare %helper_preset[42] := (...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,16,2,1,0,1,294118,100,0,0,250)
		declare %helper_rhythm[33] := (...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,100,100,100,100,100,100,100,100,100,100,16)
		make_persistent(%helper_preset)
		declare %default_preset[42] := (...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,100,100,100,100,100,100,100,100,...
		100,100,16,2,1,0,1,294118,100,0,0,250)

		declare %preset_arr[12*42]
		make_persistent(%Preset_arr)
		$a_ARP := 0
		while($a_ARP < 12*42)
			%preset_arr[$a_ARP] := %default_preset[$a_ARP mod 42]
			inc($a_ARP)
		end while
		
		$a_ARP := 0
		set_table_steps_shown(%rhythm, $steps)

		_read_persistent_var($Sync_knob)
		set_knob_label ($Sync_knob,!tempo_names[$Sync_knob])
		
		$Rate_knob := ($sync_knob *1000001) / 17
		set_knob_defval ($Rate_knob,(5 *1000001) / 17)
		set_knob_label ($Rate_knob,!tempo_names[$sync_knob])
		set_knob_unit($Rate_knob,$KNOB_UNIT_NONE)

		declare ui_label $note_order_label (1,1)
		set_text ($note_order_label,"Note Order:")
		set_control_par(get_ui_id($note_order_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
		
		declare ui_label $Global_label (3,1)
		set_text ($Global_label,"Global Settings")
		set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
		
		declare ui_label $Pitch_label (3,1)
		set_text ($Pitch_label,"Pitch")
		set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
		
		declare ui_label $Timing_label (3,1)
		set_text ($Timing_label,"Timing")
		set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

		declare ui_label $Rhythm_label (3,1)
		set_text ($Rhythm_label,"Rhythm")
		set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

		{******************** SET CONTROL HELP ****************************************}
		
		set_control_help($Latch_knob,"Arpeggiator Mode: Choose among three arpeggiator modes. <On> enables the normal arpeggiator mode. <Hold> will latch all played keys. <Hold+-> will latch all played keys and subsequently played keys will be added or taken away from the note buffer. <Off> turns the arpeggiator off.")
		set_control_help($Dur,"Duration: Sets the duration of the arpeggiated MIDI notes in percent. This will only hange the length o the MIDI notes, not the volume envelope.")
		set_control_help($Strike,"Strike: Sets the number of strikes of each note of the note buffer. When <Strike> is set to any other value other than 1, each note of the note buffer will be repeated by the amount specified with <Strike>.")
		set_control_help(%rhythm,"Rhythm Grid: Sets the rhythmic pattern of the arpeggiated notes. The columns set the velocity of each note. If a column is set to 0 (e.g. by Cmd/Ctrl cliking on a table column), the step will not be played. The actual velocity depends on the <Fix Velocity> button, the length of the pattern can be set with <Steps>.")
		set_control_help($Swing,"Swing: Offsets every other step by the specified amount in percent in order to create a swing feel. Positive values delay every other step, negative values push every other step forward.")
		set_control_help($Steps,"Steps: Sets the number of steps of the rhythmic pattern.")
		set_control_help($Octave,"Octave: Sets the octave displacement, i.e. the distribution of the arpeggio pattern in various octaves. The arpeggio pattern cycles from the played octave to the octave set upwards.")
		set_control_help($note_order_label,"Note Order: Defines the pattern for the order in which notes are arpeggiated.")
		set_control_help($note_order,"Note Order: Defines the pattern for the order in which notes are arpeggiated.")
		set_control_help($velo_button,"Fix Velocity: When enabled, played velocities are ignored and taken from the columns in the rhythmic grid. When deactivated, played velocities will be scaled by the columns of the rhythmic grid.")
		set_control_help($edit_preset,"Preset Menu: Selection of factory presets.")
		set_control_help($Global_label,"Global Settings: Adjust the arpeggiator's global settings.")
		set_control_help($Pitch_label,"Pitch Settings: Adjust the arpeggiator's pitch settings, which determine the octaves and note repititions played.")	
		set_control_help($Pitch_label,"Timing Settings: Adjust the arpeggiator's timing settings, which determine the rate and duration of the notes and the amount of swing.")	
		set_control_help($Pitch_label,"Rhythm Settings: Adjust the arpeggiator's rhythm settings, which determine the velocities of the notes and the number of velocity steps played.")	
		set_control_help($Sync_knob,"Rate (Sync): Adjust the tempo in rhythmical values, synced to the master clock. T stands for triplet.")
		set_control_help($midi_thru,"MIDI Thru: When activated, played notes will be merged with the arpeggiated notes.")
		set_control_help($Rate_Knob,"Rate: Sets the rate of the arpeggiator.")

		{******************** SET CONTROL HELP ****************************************}

	{ ---- ARP end ---- }

	{ ---- midiMonitor Display ---- }
		declare !CC_names[128]
		declare $count_midi
		while ($count_midi < 128)
			!CC_names[$count_midi] := "Not assigned"
			inc ($count_midi)
		end while

		!CC_names[0] :=	"Bank Select"
		!CC_names[1]:=	"Modulation Wheel"
		!CC_names[2]:=	"Breath Controller"
		!CC_names[4]:=	"Foot Pedal"
		!CC_names[5]:=	"Portamento Time"                                              
		!CC_names[6]:=	"Data Entry"
		!CC_names[7]:=	"Volume"
		!CC_names[8]:=	"Balance"
		!CC_names[10]:=	"Pan Position"
		!CC_names[11]:=	"Expression"
		!CC_names[12]:=	"Effect Control 1"
		!CC_names[13]:=	"Effect Control 2"
		!CC_names[16]:=	"GeneralPurpose Slider 1"
		!CC_names[17]:=	"General Purpose Slider 2"
		!CC_names[18]:=	"General Purpose Slider 3"
		!CC_names[19]:=	"General Purpose Slider 4"
		
		!CC_names[32]:=	"Bank Select fine"
		!CC_names[33]:=	"Modulation Wheel fine"
		!CC_names[34]:=	"Breath Controller fine"
		!CC_names[36]:=	"Foot Pedal fine"
		!CC_names[37]:=	"Portamento Time fine"
		!CC_names[38]:=	"Data Entry fine"
		!CC_names[39]:=	"Volume fine"
		!CC_names[40]:=	"Balance fine"
		!CC_names[42]:=	"Pan Position fine"
		!CC_names[43]:=	"Expression fine"
		!CC_names[44]:=	"Effect Control 1 fine"
		!CC_names[45]:=	"Effect Control 2 fine"

		!CC_names[64]:=	"Hold/Sustain Pedal"
		!CC_names[65]:=	"Portamento Pedal"
		!CC_names[66]:=	"Sostenuto Pedal"
		!CC_names[67]:=	"Soft Pedal"
		!CC_names[68]:=	"Legato Pedal"
		!CC_names[69]:=	"Hold 2 Pedal"
		!CC_names[70]:=	"Sound Variation"
		!CC_names[71]:=	"Sound Timbre"
		!CC_names[72]:=	"Sound Release Time"
		!CC_names[73]:=	"Sound Attack Time"
		!CC_names[74]:=	"Sound Brightness"
		!CC_names[75]:=	"Sound Decay Time"
		!CC_names[76]:=	"Sound Control 7"
		!CC_names[77]:=	"Sound Control 8"
		!CC_names[78]:=	"Sound Control 9"
		!CC_names[79]:=	"Sound Control 10"
		!CC_names[80]:=	"General Purpose Button 1"
		!CC_names[81]:=	"General Purpose Button 2"
		!CC_names[82]:=	"General Purpose Button 3"
		!CC_names[83]:=	"General Purpose Button 4"
		!CC_names[91]:=	"Reverb Level"
		!CC_names[92]:=	"Tremolo Level"
		!CC_names[93]:=	"Chorus Level"
		!CC_names[94]:=	"Celeste Level"
		!CC_names[95]:=	"Phaser Level"
		!CC_names[96]:=	"Data Button inc"
		!CC_names[97]:=	"Data Button dec"
		!CC_names[98]:=	"NRPN fine"
		!CC_names[99]:=	"NRPN coarse"
		!CC_names[100]:= "RPN fine"
		!CC_names[101]:= "RPN coarse"
		!CC_names[120]:= "All Sound Off"
		!CC_names[121]:= "All Controllers Off"
		!CC_names[122]:= "Local Keyboard"
		!CC_names[123]:= "All Notes Off"
		!CC_names[124]:= "Omni Mode Off"
		!CC_names[125]:= "Omni Mode On"
		!CC_names[126]:= "Mono Operation"
		!CC_names[127]:= "Poly Operation"
		
		declare !note_names_MIDI[12]
		!note_names_MIDI[0] := "C"
		!note_names_MIDI[1] := "Db"
		!note_names_MIDI[2] := "D"
		!note_names_MIDI[3] := "Eb"
		!note_names_MIDI[4] := "E"
		!note_names_MIDI[5] := "F"
		!note_names_MIDI[6] := "Gb"
		!note_names_MIDI[7] := "G"
		!note_names_MIDI[8] := "Ab"
		!note_names_MIDI[9] := "A"
		!note_names_MIDI[10] := "Bb"
		!note_names_MIDI[11] := "B"

		declare ui_switch $Note_On
		set_text ($Note_On,"Note On")
		
		declare ui_switch $Note_Off
		set_text($Note_Off,"Note Off")
		
		declare ui_switch $controller_button
		set_text ($controller_button,"Controller")
		
		declare ui_switch $pbend_button
		set_text ($pbend_button,"Pitchbend")
		
		declare ui_switch $Velocity
		declare ui_switch $rpn_nrpn
		set_text($rpn_nrpn,"RPN/NRPN")
		
		declare ui_switch $pressure_button
		set_text($pressure_button,"Channel Pressure")
		
		declare ui_switch $clear_button
		set_text($clear_button,"Clear Display")
		declare ui_switch $verbose_button
		set_text($verbose_button,"Verbose Mode")
		
		declare ui_label $display (3,6)
		declare ui_label $labelMIDI (2,1)
		
		declare ui_label $display_label (3,1)
		set_text ($display_label,"MIDI Monitor Display")
		set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
		
		set_text ($display, "")
		set_text ($labelMIDI, "Choose what MIDI events to monitor")
		
		$Note_On := 1
		$Velocity := 1
		$pbend_button := 1
		$controller_button := 1
		$rpn_nrpn := 0
		
		make_persistent ($Note_On)
		make_persistent ($Velocity)
		make_persistent ($controller_button)
		make_persistent ($pbend_button)
		make_persistent ($Note_Off)
		make_persistent ($verbose_button)
		make_persistent ($rpn_nrpn)
		make_persistent ($pressure_button)
		
			
		set_control_help ($Note_On,"Note On: If selected, the note numbers of incoming MIDI note on messages will be displayed.")
		set_control_help ($Velocity,"Velocity: If selected, the velocities of incoming MIDI note on messages will be displayed.")
		set_control_help ($controller_button, "Controller: If selected, incoming MIDI CC messages will be displayed.")
		set_control_help ($pbend_button, "Pitchbend: If selected, incoming MIDI pitchbend messages will be displayed.")
		set_control_help ($Note_Off,"Note Off: If selected, the note number of incoming MIDI note off messages will be displayed.")
		
		set_control_help ($verbose_button,"Verbose: Turns on Verbose Mode for the MIDI monitor display., Each MIDI message will be displayed on a separate line.")
		set_control_help ($rpn_nrpn,"RPN/NRPN: If selected, incoming MIDI RPN and NRPN messages will be displayed.")
		set_control_help ($pressure_button,"Channel Pressure: If selected, incoming MIDI Channel Pressure messages will be displayed.")
		set_control_help ($clear_button,"Clear: Clears the MIDI Monitor display.")
		set_control_help ($display,"The MIDI monitor display.")

	{ ---- midiMonitor Display end ---- }
	


	{ ---- GUI.main_master ---- }
		move_control_px($preset_label, 120, 10)
			set_control_par(get_ui_id($preset_label),$CONTROL_PAR_WIDTH,290)
			set_control_par(get_ui_id($preset_label),$CONTROL_PAR_FONT_TYPE, 17)
			set_control_par(get_ui_id($preset_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
		move_control_px($selected_group, 220, 30)

		move_control_px($tune_sli, 495, 42)

		move_control_px($Cutoff_LP_sli, 430, 10)
		move_control_px($resonance_sli, 430, 75)

		move_control_px($panSpeed_sli, 560, 10)
		move_control_px($panDepth_sli, 560, 75)	

		move_control_px($Attack_sli, 5, 250)
		move_control_px($Hold_sli, 30, 285)
		move_control_px($Decay_sli, 5, 320)
		move_control_px($Sustain_sli, 30, 355)
		move_control_px($Release_sli, 5, 390)

		move_control_px($eqLow_sli, 10, 190)
		move_control_px($eqFreq2_sli, 10, 70)
		move_control_px($eqMid_sli, 10, 130)
		move_control_px($eqHi_sli, 10, 10)

		move_control_px($ChorusSw, 540, 150)
		move_control_px($ChorusMix,450, 150)
		move_control_px($chDepth_sli, 540, 225)
		move_control_px($chSpeed_sli, 450, 225)

		move_control_px($delaySw, 540, 300)
		move_control_px($delayMix,450, 300)
		move_control_px($dlTime_sli, 450, 375)
		move_control_px($dlFback_sli, 540, 375)

		move_control_px($StereoSw, 560, 450)
		
		move_control_px($CabinetSw, 445, 450)

		move_control_px($KOTOizeSw, 502, 450)

		move_control_px($reverbSw, 10, 450)
		move_control_px($reverbMix, 95, 450)
		move_control_px($revPreDL_sli, 180, 450)
		move_control_px($IRsize_sli, 265, 450)
		move_control_px($IR_LP_sli, 350, 450)

		select ($selected_group)
				case 0
					{ - interval - }
					move_control_px($interval_label,120000,280000)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($interval_knob,120000,300000)
					move_control_px($octave_knob,220000,300000)
					move_control_px($velocity_knob,320000,300000)

				{ - GUI Portamento - }
					{POSITIONING OF DEFAULT VIEW}
								
					{Mono}
					move_control_px($mono_label,120000, 350000)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($mono_mode_knob,120000, 370000)
					move_control_px($mono_key_up_button,300000, 370000)
					move_control_px($mono_prio_label,210000, 390000)
					move_control_px($mono_prio_menu,210000, 370000)
					
					{Portamento}
					move_control_px($portamento_label,120000, 280000)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($portamento_knob,120000, 300000)
					move_control_px($porta_rel_glide_button,300000, 300000)
					move_control_px($porta_combi_knob,210000, 300000)
					
					{Unisono}
					move_control_px($uni_label,4000, 7000)
					move_control_px($uni_voices_knob,4000, 8000)
					move_control_px($uni_detune_knob,5000, 8000)
					move_control_px($uni_spread_knob,6000, 8000)

				{ - GUI glideMono - }
					move_control_px($glideMono_label,120000,280000)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($Glide, 120000, 300000)
					move_control_px($Start, 210000, 300000)
					move_control_px($Scaling, 300000, 300000)
					move_control_px($Threshold, 210000, 360000)

				{ - Microtuning - }
					move_control_px($labelTitle, 120000, 260000)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

						{ - UI %tune_ui table - }
					move_control_px(%tune_ui, 120000, 350000)
						set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($label, 120000, 325000)
					move_control_px($Key_knobMicro, 120000, 280000)
					move_control_px($Preset, 220000, 280000)
					move_control_px($Preset_menu, 220000, 325000)
					move_control_px($Amount, 320000, 280000)

				{ - ARP - }
				move_control_px($Global_label,120000,70000)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Pitch_label,120000,230000)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Timing_label,120000,140000)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Rhythm_label,120000,300000)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

				move_control_px($note_order_label,170000,205000)

					{ - UI %rhythm table - }
				move_control_px(%rhythm,120000,320000)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
					{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
					set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
					
				move_control_px($swing,320000,160000)
				move_control_px($steps,120000,405000)

				move_control_px($Dur,220000,160000)
				move_control_px($note_order,270000,205000)
				move_control_px($strike,270000,250000)	

				move_control_px($Octave,170000,250000)		
				move_control_px($latch_knob,120000,90000) {mode knob}

				move_control_px($edit_preset,220000,90000)
				move_control_px($Velo_button,320000,405000)

				move_control_px($midi_thru,320000,90000)
				move_control_px($Rate_knob,120000,160000)
				move_control_px($Sync_knob,1000000,1000000)

				{ - GUI midiMonitor display - }
					move_control_px($display_label,120,70)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120,90)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
				    set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,150)
				    { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
				    set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280,250)
					move_control_px($verbose_button,160,250)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

				case 1
				

					{ - interval - }
					move_control_px($interval_label,120,280)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($interval_knob,120,300)
					move_control_px($octave_knob,220,300)
					move_control_px($velocity_knob,320,300)

					{ - GUI Portamento - }
					{POSITIONING OF DEFAULT VIEW}
								
					{Mono}
					move_control_px($mono_label,120000, 350000)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($mono_mode_knob,120000, 370000)
					move_control_px($mono_key_up_button,300000, 370000)
					move_control_px($mono_prio_label,210000, 390000)
					move_control_px($mono_prio_menu,210000, 370000)
					
					{Portamento}
					move_control_px($portamento_label,120000, 280000)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($portamento_knob,120000, 300000)
					move_control_px($porta_rel_glide_button,300000, 300000)
					move_control_px($porta_combi_knob,210000, 300000)
					
					{Unisono}
					move_control_px($uni_label,4000, 7000)
					move_control_px($uni_voices_knob,4000, 8000)
					move_control_px($uni_detune_knob,5000, 8000)
					move_control_px($uni_spread_knob,6000, 8000)

				{ - GUI glideMono - }
					move_control_px($glideMono_label,120000,280000)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($Glide, 120000, 300000)
					move_control_px($Start, 210000, 300000)
					move_control_px($Scaling, 300000, 300000)
					move_control_px($Threshold, 210000, 360000)

				{ - Microtuning - }
					move_control_px($labelTitle, 120000, 260000)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

						{ - UI %tune_ui table - }
					move_control_px(%tune_ui, 120000, 350000)
						set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($label, 120000, 325000)
					move_control_px($Key_knobMicro, 120000, 280000)
					move_control_px($Preset, 220000, 280000)
					move_control_px($Preset_menu, 220000, 325000)
					move_control_px($Amount, 320000, 280000)

				{ - ARP - }
				move_control_px($Global_label,120000,70000)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Pitch_label,120000,230000)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Timing_label,120000,140000)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Rhythm_label,120000,300000)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

				move_control_px($note_order_label,170000,205000)

					{ - UI %rhythm table - }
				move_control_px(%rhythm,120000,320000)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
					{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
					set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
					
				move_control_px($swing,320000,160000)
				move_control_px($steps,120000,405000)

				move_control_px($Dur,220000,160000)
				move_control_px($note_order,270000,205000)
				move_control_px($strike,270000,250000)	

				move_control_px($Octave,170000,250000)		
				move_control_px($latch_knob,120000,90000) {mode knob}

				move_control_px($edit_preset,220000,90000)
				move_control_px($Velo_button,320000,405000)

				move_control_px($midi_thru,320000,90000)
				move_control_px($Rate_knob,120000,160000)
				move_control_px($Sync_knob,1000000,1000000)

				{ - GUI midiMonitor display - }
					move_control_px($display_label,120,70)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120,90)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
				    set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,150)
				    { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
				    set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280,250)
					move_control_px($verbose_button,160,250)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

				case 2
					

					{ - GUI Portamento - }
					{POSITIONING OF DEFAULT VIEW}
								
					{Mono}
					move_control_px($mono_label,120, 350)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($mono_mode_knob,120, 370)
					move_control_px($mono_key_up_button,300, 370)
					move_control_px($mono_prio_label,210, 390)
					move_control_px($mono_prio_menu,210, 370)
					
					{Portamento}
					move_control_px($portamento_label,120, 280)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($portamento_knob,120, 300)
					move_control_px($porta_rel_glide_button,300, 300)
					move_control_px($porta_combi_knob,210, 300)
					
					{Unisono}
					move_control_px($uni_label,4000, 7000)
					move_control_px($uni_voices_knob,4000, 8000)
					move_control_px($uni_detune_knob,5000, 8000)
					move_control_px($uni_spread_knob,6000, 8000)

					{ - interval - }
					move_control_px($interval_label,120000,280000)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($interval_knob,120000,300000)
					move_control_px($octave_knob,220000,300000)
					move_control_px($velocity_knob,320000,300000)

				{ - GUI glideMono - }
					move_control_px($glideMono_label,120000,280000)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($Glide, 120000, 300000)
					move_control_px($Start, 210000, 300000)
					move_control_px($Scaling, 300000, 300000)
					move_control_px($Threshold, 210000, 360000)

				{ - Microtuning - }
					move_control_px($labelTitle, 120000, 260000)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

						{ - UI %tune_ui table - }
					move_control_px(%tune_ui, 120000, 350000)
						set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($label, 120000, 325000)
					move_control_px($Key_knobMicro, 120000, 280000)
					move_control_px($Preset, 220000, 280000)
					move_control_px($Preset_menu, 220000, 325000)
					move_control_px($Amount, 320000, 280000)

				{ - ARP - }
				move_control_px($Global_label,120000,70000)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Pitch_label,120000,230000)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Timing_label,120000,140000)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Rhythm_label,120000,300000)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

				move_control_px($note_order_label,170000,205000)

					{ - UI %rhythm table - }
				move_control_px(%rhythm,120000,320000)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
					{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
					set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
					
				move_control_px($swing,320000,160000)
				move_control_px($steps,120000,405000)

				move_control_px($Dur,220000,160000)
				move_control_px($note_order,270000,205000)
				move_control_px($strike,270000,250000)	

				move_control_px($Octave,170000,250000)		
				move_control_px($latch_knob,120000,90000) {mode knob}

				move_control_px($edit_preset,220000,90000)
				move_control_px($Velo_button,320000,405000)

				move_control_px($midi_thru,320000,90000)
				move_control_px($Rate_knob,120000,160000)
				move_control_px($Sync_knob,1000000,1000000)

				{ - GUI midiMonitor display - }
					move_control_px($display_label,120,70)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120,90)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
				    set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,150)
				    { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
				    set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280,250)
					move_control_px($verbose_button,160,250)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

				case 3
				

					{ - GUI glideMono - }
					move_control_px($glideMono_label,120,280)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($Glide, 120, 300)
					move_control_px($Start, 220, 300)
					move_control_px($Scaling, 320, 300)
					move_control_px($Threshold, 210000, 360000)

					{ - interval - }
					move_control_px($interval_label,120000,280000)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($interval_knob,120000,300000)
					move_control_px($octave_knob,220000,300000)
					move_control_px($velocity_knob,320000,300000)

				{ - GUI Portamento - }
					{POSITIONING OF DEFAULT VIEW}
								
					{Mono}
					move_control_px($mono_label,120000, 350000)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($mono_mode_knob,120000, 370000)
					move_control_px($mono_key_up_button,300000, 370000)
					move_control_px($mono_prio_label,210000, 390000)
					move_control_px($mono_prio_menu,210000, 370000)
					
					{Portamento}
					move_control_px($portamento_label,120000, 280000)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($portamento_knob,120000, 300000)
					move_control_px($porta_rel_glide_button,300000, 300000)
					move_control_px($porta_combi_knob,210000, 300000)
					
					{Unisono}
					move_control_px($uni_label,4000, 7000)
					move_control_px($uni_voices_knob,4000, 8000)
					move_control_px($uni_detune_knob,5000, 8000)
					move_control_px($uni_spread_knob,6000, 8000)

				{ - Microtuning - }
					move_control_px($labelTitle, 120000, 260000)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

						{ - UI %tune_ui table - }
					move_control_px(%tune_ui, 120000, 350000)
						set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($label, 120000, 325000)
					move_control_px($Key_knobMicro, 120000, 280000)
					move_control_px($Preset, 220000, 280000)
					move_control_px($Preset_menu, 220000, 325000)
					move_control_px($Amount, 320000, 280000)

				{ - ARP - }
				move_control_px($Global_label,120000,70000)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Pitch_label,120000,230000)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Timing_label,120000,140000)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Rhythm_label,120000,300000)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

				move_control_px($note_order_label,170000,205000)

					{ - UI %rhythm table - }
				move_control_px(%rhythm,120000,320000)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
					{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
					set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
					
				move_control_px($swing,320000,160000)
				move_control_px($steps,120000,405000)

				move_control_px($Dur,220000,160000)
				move_control_px($note_order,270000,205000)
				move_control_px($strike,270000,250000)	

				move_control_px($Octave,170000,250000)		
				move_control_px($latch_knob,120000,90000) {mode knob}

				move_control_px($edit_preset,220000,90000)
				move_control_px($Velo_button,320000,405000)

				move_control_px($midi_thru,320000,90000)
				move_control_px($Rate_knob,120000,160000)
				move_control_px($Sync_knob,1000000,1000000)

				{ - GUI midiMonitor display - }
					move_control_px($display_label,120,70)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120,90)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
				    set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,150)
				    { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
				    set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280,250)
					move_control_px($verbose_button,160,250)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

				case 4
				

					{ - GUI midiMonitor display - }
					move_control_px($display_label,120,70)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120,90)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
			        set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,130)
			        { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
			        set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280,230)
					move_control_px($verbose_button,160,230)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

					{ - Microtuning - }
					move_control_px($labelTitle, 120, 260)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

						{ - UI %tune_ui table - }
					move_control_px(%tune_ui, 120, 350)
						set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($label, 120, 325)
					move_control_px($Key_knobMicro, 120, 280)
					move_control_px($Preset, 220, 280)
					move_control_px($Preset_menu, 220, 325)
					move_control_px($Amount, 320, 280)

					{ - interval - }
					move_control_px($interval_label,120000,280000)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($interval_knob,120000,300000)
					move_control_px($octave_knob,220000,300000)
					move_control_px($velocity_knob,320000,300000)

				{ - GUI Portamento - }
					{POSITIONING OF DEFAULT VIEW}
								
					{Mono}
					move_control_px($mono_label,120000, 350000)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($mono_mode_knob,120000, 370000)
					move_control_px($mono_key_up_button,300000, 370000)
					move_control_px($mono_prio_label,210000, 390000)
					move_control_px($mono_prio_menu,210000, 370000)
					
					{Portamento}
					move_control_px($portamento_label,120000, 280000)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($portamento_knob,120000, 300000)
					move_control_px($porta_rel_glide_button,300000, 300000)
					move_control_px($porta_combi_knob,210000, 300000)
					
					{Unisono}
					move_control_px($uni_label,4000, 7000)
					move_control_px($uni_voices_knob,4000, 8000)
					move_control_px($uni_detune_knob,5000, 8000)
					move_control_px($uni_spread_knob,6000, 8000)

				{ - GUI glideMono - }
					move_control_px($glideMono_label,120000,280000)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($Glide, 120000, 300000)
					move_control_px($Start, 210000, 300000)
					move_control_px($Scaling, 300000, 300000)
					move_control_px($Threshold, 210000, 360000)

				{ - ARP - }
				move_control_px($Global_label,120000,70000)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Pitch_label,120000,230000)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Timing_label,120000,140000)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
				move_control_px($Rhythm_label,120000,300000)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

				move_control_px($note_order_label,170000,205000)

					{ - UI %rhythm table - }
				move_control_px(%rhythm,120000,320000)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
					set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
					{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
					set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
					
				move_control_px($swing,320000,160000)
				move_control_px($steps,120000,405000)

				move_control_px($Dur,220000,160000)
				move_control_px($note_order,270000,205000)
				move_control_px($strike,270000,250000)	

				move_control_px($Octave,170000,250000)		
				move_control_px($latch_knob,120000,90000) {mode knob}

				move_control_px($edit_preset,220000,90000)
				move_control_px($Velo_button,320000,405000)

				move_control_px($midi_thru,320000,90000)
				move_control_px($Rate_knob,120000,160000)
				move_control_px($Sync_knob,1000000,1000000)

				case 5
				

					{ - GUI midiMonitor display - }
					move_control_px($display_label,120000,70000)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120000,90000)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
			        set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,150)
			        { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
			        set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280000,250000)
					move_control_px($verbose_button,160000,250000)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

					{ - ARP - }
					move_control_px($Global_label,120,70)
						set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					move_control_px($Pitch_label,120,230)
						set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					move_control_px($Timing_label,120,140)
						set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					move_control_px($Rhythm_label,120,300)
						set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					
					move_control_px($note_order_label,170,205)

						{ - UI %rhythm table - }
					move_control_px(%rhythm,120,320)
						set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
						set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
						
					move_control_px($swing,320,160)
					move_control_px($steps,120,405)
					
					move_control_px($Dur,220,160)
					move_control_px($note_order,270,205)
					move_control_px($strike,270,250)	
					
					move_control_px($Octave,170,250)		
					move_control_px($latch_knob,120,90) {mode knob}
					
					move_control_px($edit_preset,220,90)
					move_control_px($Velo_button,320,405)
					
					move_control_px($midi_thru,320,90)
					move_control_px($Rate_knob,120,160)
					move_control_px($Sync_knob,1000000,1000000)

					{ - interval - }
					move_control_px($interval_label,120000,280000)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($interval_knob,120000,300000)
					move_control_px($octave_knob,220000,300000)
					move_control_px($velocity_knob,320000,300000)

				{ - GUI Portamento - }
					{POSITIONING OF DEFAULT VIEW}
								
					{Mono}
					move_control_px($mono_label,120000, 350000)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($mono_mode_knob,120000, 370000)
					move_control_px($mono_key_up_button,300000, 370000)
					move_control_px($mono_prio_label,210000, 390000)
					move_control_px($mono_prio_menu,210000, 370000)
					
					{Portamento}
					move_control_px($portamento_label,120000, 280000)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($portamento_knob,120000, 300000)
					move_control_px($porta_rel_glide_button,300000, 300000)
					move_control_px($porta_combi_knob,210000, 300000)
					
					{Unisono}
					move_control_px($uni_label,4000, 7000)
					move_control_px($uni_voices_knob,4000, 8000)
					move_control_px($uni_detune_knob,5000, 8000)
					move_control_px($uni_spread_knob,6000, 8000)

				{ - GUI glideMono - }
					move_control_px($glideMono_label,120000,280000)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($Glide, 120000, 300000)
					move_control_px($Start, 210000, 300000)
					move_control_px($Scaling, 300000, 300000)
					move_control_px($Threshold, 210000, 360000)

				{ - Microtuning - }
					move_control_px($labelTitle, 120000, 260000)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

						{ - UI %tune_ui table - }
					move_control_px(%tune_ui, 120000, 350000)
						set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($label, 120000, 325000)
					move_control_px($Key_knobMicro, 120000, 280000)
					move_control_px($Preset, 220000, 280000)
					move_control_px($Preset_menu, 220000, 325000)
					move_control_px($Amount, 320000, 280000)

			end select


	{ ---- message ---- }
	message("Hope you are enjoying the instruments! Have fun, spread the <3 - Ruslan")


end on

	{ - AHDSR - }
		{ ---- Change Custom Attack Slider---- }
		on ui_control ($Attack_sli) 
			set_engine_par($ENGINE_PAR_ATTACK,$Attack_sli,$grp_idx,$env_idx,-1)
			set_control_par_str(get_ui_id($Attack_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_ATTACK,$grp_idx,$env_idx,-1) & " ms")
		end on

		{ ---- Change Custom Hold Slider---- }
		on ui_control ($Hold_sli) 
			set_engine_par($ENGINE_PAR_HOLD,$Hold_sli,$grp_idx,$env_idx,-1)
			set_control_par_str(get_ui_id($Hold_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_HOLD,$grp_idx,$env_idx,-1) & " ms")
		end on

		{ ---- Change Custom Decay Slider---- }
		on ui_control ($Decay_sli) 
			set_engine_par($ENGINE_PAR_DECAY,$Decay_sli,$grp_idx,$env_idx,-1)
			set_control_par_str(get_ui_id($Decay_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_DECAY,$grp_idx,$env_idx,-1) & " ms")
		end on

		{ ---- Change Custom Sustain Slider---- }
		on ui_control ($Sustain_sli) 
			set_engine_par($ENGINE_PAR_SUSTAIN,$Sustain_sli,$grp_idx,$env_idx,-1)
			set_control_par_str(get_ui_id($Sustain_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_SUSTAIN,$grp_idx,$env_idx,-1) & " dB")
		end on	

		{ ---- Change Custom Release Slider---- }
		on ui_control ($Release_sli) 
			set_engine_par($ENGINE_PAR_RELEASE,$Release_sli,$grp_idx,$env_idx,-1)
			set_control_par_str(get_ui_id($Release_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_RELEASE,$grp_idx,$env_idx,-1) & " ms")
		end on
	{ - AHDSR end - }

	{ - EQ - }
		{ ---- Change low-EQ Slider---- }
		on ui_control ($eqLow_sli)
			set_engine_par($ENGINE_PAR_GAIN1, $eqLow_sli, $grp_idx, 0, -1)
		end on

		{ ---- Change mid-EQ FREQ2 Slider---- }
		on ui_control ($eqFREQ2_sli)
			set_engine_par($ENGINE_PAR_FREQ2, $eqFREQ2_sli, $grp_idx, 0, -1)
		end on

		{ ---- Change mid-EQ Slider---- }
		on ui_control ($eqMid_sli)
			set_engine_par($ENGINE_PAR_GAIN2, $eqMid_sli, $grp_idx, 0, -1)
		end on

		{ ---- Change hi-EQ Slider---- }
		on ui_control ($eqHi_sli)
			set_engine_par($ENGINE_PAR_GAIN3, $eqHi_sli, $grp_idx, 0, -1)
		end on
	{ - EQ end - }

	{ - Cutoff_LP - }
		{ ---- Change Custom Cutoff_LP Slider---- }
		on ui_control ($Cutoff_LP_sli)
			set_engine_par($ENGINE_PAR_CUTOFF, $Cutoff_LP_sli, -1, 6, 1)
		end on

		{ ---- Change Custom Resonance Slider---- }
		on ui_control ($resonance_sli)
			set_engine_par($ENGINE_PAR_RESONANCE, $resonance_sli, -1, 6, 1)
		end on
	{ - Cutoff_LP end - }

	{ - tuning - }
		{ ---- Change Custom Tuning Slider ---- }
		on ui_control ($tune_sli)
			set_engine_par($ENGINE_PAR_TUNE, $tune_sli, $grp_idx, -1, -1)

		end on
	{ - tuning end - }

	{ - Panning (sine/freq) - }	
		{ ---- Change Custom panSpeed Slider ---- }
		on ui_control ($panSpeed_sli) 
			set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,$panSpeed_sli,$grp_idx,$lfo_idx,-1)
			set_control_par_str(get_ui_id($panSpeed_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_INTMOD_FREQUENCY,$grp_idx,$lfo_idx,-1) & " Hz")
		end on

		{ ---- Change Custom panDepth Slider ---- }
		on ui_control ($panDepth_sli) 
			set_engine_par($ENGINE_PAR_LFO_SINE,$panDepth_sli,$grp_idx,$lfo_idx,-1)
			set_control_par_str(get_ui_id($panDepth_sli),$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_LFO_SINE,$grp_idx,$lfo_idx,-1) & " ")
		end on
	{ - Panning (sine/freq) end - }

	{ - chorus - }
		{ ---- On/Off Chorus Switch ---- }
		on ui_control ($ChorusSw)
		    set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1 - $ChorusSw,-1,2,1)
		end on

		{ ---- Change Custom Chorus Mix Slider---- }
		on ui_control ($ChorusMix)
			set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, $ChorusMix, -1, 2, 1)
		end on

		{ ---- Change Custom Chorus Depth Slider---- }
		on ui_control ($chDepth_sli)
			set_engine_par($ENGINE_PAR_CH_DEPTH, $chDepth_sli, -1, 2, 1)
		end on

		{ ---- Change Custom Chorus Speed Slider---- }
		on ui_control ($chSpeed_sli)
			set_engine_par($ENGINE_PAR_CH_SPEED, $chSpeed_sli, -1, 2, 1)
		end on
	{ - chorus end - }

	{ - delay - }
		{ ---- On/Off Delay Switch ---- }
		on ui_control ($delaySw)
		    set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS,1 - $delaySw,-1,6,0)
		end on

		{ ---- Change Custom Delay Mix Slider---- }
		on ui_control ($delayMix)
			set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, $delayMix, -1, 6, 0)
		end on

		{ ---- Change Custom Delay Time Slider---- }
		on ui_control ($dlTime_sli)
			set_engine_par($ENGINE_PAR_DL_TIME, $dlTime_sli, -1, 6, 0)
		end on

		{ ---- Change Custom Delay Feedback Slider---- }
		on ui_control ($dlFback_sli)
			set_engine_par($ENGINE_PAR_DL_FEEDBACK, $dlFback_sli, -1, 6, 0)
		end on
	{ - delay end - }

	{ - cabinet - }
		{ ---- On/Off Cabinet Switch ---- }
		on ui_control ($CabinetSw)
		    set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1 - $CabinetSw,-1,1,1)
		end on
	{ - cabinet end - }

	{ - KOTOize - }
		{ ---- On/Off KOTOize Switch ---- }
		on ui_control ($KOTOizeSw)
		    set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1 - $KOTOizeSw, $grp_idx,3,-1)
		end on
	{ - KOTOize end - }

	{ - stereo - }
		{ ---- On/Off Stereo Switch ---- }
		on ui_control ($StereoSw)
		    set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1 - $StereoSw,-1,3,1)
		end on
	{ - stereo end - }

	{ - reverb - }
		{ ---- On/Off Reverb Switch ---- }
		on ui_control ($reverbSw)
		    set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS,1 - $reverbSw,-1,7,0)
		end on

		{ ---- Change Custom Reverb Mix Slider---- }
		on ui_control ($reverbMix)
			set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, $reverbMix, -1, 7, 0)
		end on

		{ ---- Change Custom Reverb preDelay Slider---- }
		on ui_control ($revPreDL_sli)
			set_engine_par($ENGINE_PAR_IRC_PREDELAY, $revPreDL_sli, -1, 7, 0)
		end on

		{ ---- Change Custom Reverb IR_Size Slider---- }
		on ui_control ($IRsize_sli)
			set_engine_par($ENGINE_PAR_IRC_LENGTH_RATIO_LR, $IRsize_sli, -1, 7, 0)
		end on

		{ ---- Change Custom Reverb lowPass Slider---- }
		on ui_control ($IR_LP_sli)
			set_engine_par($ENGINE_PAR_IRC_FREQ_LOWPASS_LR, $IR_LP_sli, -1, 7, 0)
		end on
	{ - reverb end - }

		function hideAll_FXscripts { except MIDI monitor display }
			{ - GUI midiMonitor display - }
			move_control_px($display_label,120,70)
			set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
			set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
			set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			move_control_px($display,120,90)
			set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
	        set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,150)
	        { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
	        set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
			set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
			set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

			move_control_px($clear_button,280,250)
			move_control_px($verbose_button,160,250)
			
			move_control_px($labelMIDI,120000,1000)
			move_control_px($Note_On,5000,3000)
			move_control_px($Velocity,6000,3000)
			move_control_px($controller_button,5000,4000)
			move_control_px($pbend_button,6000,4000)
			move_control_px($Note_Off,5000,5000)
			move_control_px($rpn_nrpn,2100,2000)
			move_control_px($pressure_button,6000,5000)

			{ - interval - }
			move_control_px($interval_label,120000,280000)
				set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
				set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
				set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			move_control_px($interval_knob,120000,300000)
			move_control_px($octave_knob,220000,300000)
			move_control_px($velocity_knob,320000,300000)

			{ - GUI Portamento - }
			{POSITIONING OF DEFAULT VIEW}
						
			{Mono}
			move_control_px($mono_label,120000, 350000)
			set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
			set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
			set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			move_control_px($mono_mode_knob,120000, 370000)
			move_control_px($mono_key_up_button,300000, 370000)
			move_control_px($mono_prio_label,210000, 390000)
			move_control_px($mono_prio_menu,210000, 370000)
			
			{Portamento}
			move_control_px($portamento_label,120000, 280000)
			set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
			set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
			set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			move_control_px($portamento_knob,120000, 300000)
			move_control_px($porta_rel_glide_button,300000, 300000)
			move_control_px($porta_combi_knob,210000, 300000)
			
			{Unisono}
			move_control_px($uni_label,4000, 7000)
			move_control_px($uni_voices_knob,4000, 8000)
			move_control_px($uni_detune_knob,5000, 8000)
			move_control_px($uni_spread_knob,6000, 8000)

			{ - GUI glideMono - }
			move_control_px($glideMono_label,120000,280000)
			set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
			set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
			set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			move_control_px($Glide, 120000, 300000)
			move_control_px($Start, 210000, 300000)
			move_control_px($Scaling, 300000, 300000)
			move_control_px($Threshold, 210000, 360000)

			{ - Microtuning - }
			move_control_px($labelTitle, 120000, 260000)
				set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
				set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
				set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

				{ - UI %tune_ui table - }
			move_control_px(%tune_ui, 120000, 350000)
				set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
		        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
		        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
				{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
				set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

			move_control_px($label, 120000, 325000)
			move_control_px($Key_knobMicro, 120000, 280000)
			move_control_px($Preset, 220000, 280000)
			move_control_px($Preset_menu, 220000, 325000)
			move_control_px($Amount, 320000, 280000)

			{ - ARP - }
			move_control_px($Global_label,120000,70000)
				set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
				set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
				set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
			move_control_px($Pitch_label,120000,230000)
				set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
				set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
				set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
			move_control_px($Timing_label,120000,140000)
				set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
				set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
				set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
			move_control_px($Rhythm_label,120000,300000)
				set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
				set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
				set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
			
			move_control_px($note_order_label,170000,205000)

				{ - UI %rhythm table - }
			move_control_px(%rhythm,120000,320000)
				set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
				set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
				set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
				{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
				set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
				
			move_control_px($swing,320000,160000)
			move_control_px($steps,120000,405000)
			
			move_control_px($Dur,220000,160000)
			move_control_px($note_order,270000,205000)
			move_control_px($strike,270000,250000)	
			
			move_control_px($Octave,170000,250000)		
			move_control_px($latch_knob,120000,90000) {mode knob}
			
			move_control_px($edit_preset,220000,90000)
			move_control_px($Velo_button,320000,405000)
			
			move_control_px($midi_thru,320000,90000)
			move_control_px($Rate_knob,120000,160000)
			move_control_px($Sync_knob,1000000,1000000)


		end function

		on ui_control ($selected_group)
			select ($selected_group)
				case 0
					call hideAll_FXscripts

				case 1
					call hideAll_FXscripts

					{ - interval - }
					move_control_px($interval_label,120,280)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($interval_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($interval_knob,120,300)
					move_control_px($octave_knob,220,300)
					move_control_px($velocity_knob,320,300)

				case 2
					call hideAll_FXscripts

					{ - GUI Portamento - }
					{POSITIONING OF DEFAULT VIEW}
								
					{Mono}
					move_control_px($mono_label,120, 350)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($mono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($mono_mode_knob,120, 370)
					move_control_px($mono_key_up_button,300, 370)
					move_control_px($mono_prio_label,210, 390)
					move_control_px($mono_prio_menu,210, 370)
					
					{Portamento}
					move_control_px($portamento_label,120, 280)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($portamento_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($portamento_knob,120, 300)
					move_control_px($porta_rel_glide_button,300, 300)
					move_control_px($porta_combi_knob,210, 300)
					
					{Unisono}
					move_control_px($uni_label,4000, 7000)
					move_control_px($uni_voices_knob,4000, 8000)
					move_control_px($uni_detune_knob,5000, 8000)
					move_control_px($uni_spread_knob,6000, 8000)

				case 3
					call hideAll_FXscripts

					{ - GUI glideMono - }
					move_control_px($glideMono_label,120,280)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($glideMono_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($Glide, 120, 300)
					move_control_px($Start, 220, 300)
					move_control_px($Scaling, 320, 300)
					move_control_px($Threshold, 210000, 360000)

				case 4
					call hideAll_FXscripts

					{ - GUI midiMonitor display - }
					move_control_px($display_label,120,70)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120,90)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
			        set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,130)
			        { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
			        set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280,230)
					move_control_px($verbose_button,160,230)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

					{ - Microtuning - }
					move_control_px($labelTitle, 120, 260)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($labelTitle),$CONTROL_PAR_TEXT_ALIGNMENT,1)

						{ - UI %tune_ui table - }
					move_control_px(%tune_ui, 120, 350)
						set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_WIDTH,290)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_HEIGHT,80)
				        set_control_par(get_ui_id(%tune_ui),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%tune_ui), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($label, 120, 325)
					move_control_px($Key_knobMicro, 120, 280)
					move_control_px($Preset, 220, 280)
					move_control_px($Preset_menu, 220, 325)
					move_control_px($Amount, 320, 280)

				case 5
					call hideAll_FXscripts

					{ - GUI midiMonitor display - }
					move_control_px($display_label,120000,70000)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_WIDTH,290)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)

					move_control_px($display,120000,90000)
					set_control_par(get_ui_id($display),$CONTROL_PAR_WIDTH,290)
			        set_control_par(get_ui_id($display),$CONTROL_PAR_HEIGHT,150)
			        { set_control_par(get_ui_id($display),$CONTROL_PAR_BAR_COLOR,99CE9FFh) } {HEX colors; place in b/w <9______h>}
			        set_control_par(get_ui_id($display),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					set_control_par(get_ui_id($display),$CONTROL_PAR_FONT_TYPE, 17)
					set_control_par(get_ui_id($display), $CONTROL_PAR_HIDE, $HIDE_PART_BG)

					move_control_px($clear_button,280000,250000)
					move_control_px($verbose_button,160000,250000)
					
					move_control_px($labelMIDI,120000,1000)
					move_control_px($Note_On,5000,3000)
					move_control_px($Velocity,6000,3000)
					move_control_px($controller_button,5000,4000)
					move_control_px($pbend_button,6000,4000)
					move_control_px($Note_Off,5000,5000)
					move_control_px($rpn_nrpn,2100,2000)
					move_control_px($pressure_button,6000,5000)

					{ - ARP - }
					move_control_px($Global_label,120,70)
						set_control_par(get_ui_id($Global_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Global_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Global_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					move_control_px($Pitch_label,120,230)
						set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Pitch_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					move_control_px($Timing_label,120,140)
						set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Timing_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					move_control_px($Rhythm_label,120,300)
						set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_FONT_TYPE, 17)
						set_control_par(get_ui_id($Rhythm_label),$CONTROL_PAR_TEXT_ALIGNMENT,1)
					
					move_control_px($note_order_label,170,205)

						{ - UI %rhythm table - }
					move_control_px(%rhythm,120,320)
						set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_WIDTH,290)
						set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_HEIGHT,80)
						set_control_par(get_ui_id(%rhythm),$CONTROL_PAR_BAR_COLOR,99CE9FFh) {HEX colors; place in b/w <9______h>}
						{ set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_ZERO_LINE_COLOR, 96c7371h) }
						set_control_par(get_ui_id(%rhythm), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
						
					move_control_px($swing,320,160)
					move_control_px($steps,120,405)
					
					move_control_px($Dur,220,160)
					move_control_px($note_order,270,205)
					move_control_px($strike,270,250)	
					
					move_control_px($Octave,170,250)		
					move_control_px($latch_knob,120,90) {mode knob}
					
					move_control_px($edit_preset,220,90)
					move_control_px($Velo_button,320,405)
					
					move_control_px($midi_thru,320,90)
					move_control_px($Rate_knob,120,160)
					move_control_px($Sync_knob,1000000,1000000)

			end select
		end on

	{ - on note - }
		on note
			select ($EVENT_VELOCITY)
				case 1 to 127
				set_key_color($EVENT_NOTE,$KEY_COLOR_WHITE)
			end select

			{ - MENU group presets Select - }
				{ disallow_group($ALL_GROUPS)
				allow_group($selected_group)
				$grp_idx := $selected_group }
			{ - MENU group presets Select end - }

			{ - Sustain Pedal - }
	
			{ - Sustain Pedal end - }

			{ - offest Start point - }
			{ play_note($EVENT_NOTE,$EVENT_VELOCITY,500,-1)  		 }
			{ - offest Start point end - }

			{ - midiMonitor - }
				if ($verbose_button = 0)
				if ($Note_On = 1)
					set_text ($display, "Note On: " & !note_names_MIDI[$EVENT_NOTE mod 12] & ($EVENT_NOTE / 12) - 2 & "  (" & $EVENT_NOTE & ")")
				end if

				if ($Velocity = 1)
					set_text ($display, "Velocity: " & $EVENT_VELOCITY)
				end if

				if ($Note_On = 1 and $Velocity = 1)
					set_text ($display, "Note On: " & !note_names_MIDI[$EVENT_NOTE mod 12] & ($EVENT_NOTE / 12) - 2 & "  (" & $EVENT_NOTE & ")")
					add_text_line ($display, "Velocity: " & $EVENT_VELOCITY)
				end if
				else
				{-------Verbose Mode---------}
				if ($Note_On = 1 and $Velocity = 0)
					add_text_line ($display, "Note On: " & !note_names_MIDI[$EVENT_NOTE mod 12] & ($EVENT_NOTE / 12) - 2 & "  (" & $EVENT_NOTE & ")")
				end if

				if ($Velocity = 1 and $Note_On = 0)
					add_text_line ($display, "Velocity: " & $EVENT_VELOCITY)
				end if

				if ($Note_On = 1 and $Velocity = 1)
					add_text_line ($display, "Note On: " & !note_names_MIDI[$EVENT_NOTE mod 12] & ($EVENT_NOTE / 12) - 2 & "  (" & $EVENT_NOTE & ")" & "   Velocity: " & $EVENT_VELOCITY)
				end if
				end if

			{ - midiMonitor end - }

			if ($selected_group = 1)
				$new_note:= $EVENT_NOTE + $interval_knob+($octave_knob*12)
			
				if ($new_note < 0)
					$new_note := 0
				end if
				if ($new_note > 127)
					$new_note := 127
				end if
				
				$new_velocity := ($EVENT_VELOCITY*$velocity_knob)/100
							
				if ($new_velocity < 1)
					$new_velocity := 1
				end if
				if ($new_velocity > 127)
					$new_velocity := 127
				end if
				
				$new_id := play_note($new_note,$new_velocity,0,-1)
				change_vol($new_id,get_event_par($EVENT_ID,$EVENT_PAR_VOLUME),1)
				change_tune($new_id,get_event_par($EVENT_ID,$EVENT_PAR_TUNE),1)
				change_pan($new_id,get_event_par($EVENT_ID,$EVENT_PAR_PAN),1)

			end if

			if ($selected_group = 2)
				if (not in_range($EVENT_NOTE,$MIN_KEY,$MAX_KEY))
					exit
				end if
				
				if ($mono_leg_menu >= 0)
					disallow_group($mono_leg_menu)
				end if
				if ($det > 0 and ($mono = 1 or $portamento = 1))
					if ($ENGINE_UPTIME - $multi_check_time < $det)
						ignore_event($EVENT_ID)
						if ($organ_block = 1)
							$no_release_callback := $EVENT_ID
							exit
						end if
						if ($mono_leg_menu >= 0)
							disallow_group($mono_leg_menu)
						end if
						if ($mono_sus_menu >= 0)
							allow_group($mono_sus_menu)
						end if
						$orig_tune_2 := get_event_par($EVENT_ID,$EVENT_PAR_TUNE)
						$orig_pan_2 := get_event_par($EVENT_ID,$EVENT_PAR_PAN)
						$orig_vol_2 := get_event_par($EVENT_ID,$EVENT_PAR_VOLUME)

						$a := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,0)
						change_tune ($a, $new_tune + $orig_tune_2, 1)
						change_vol ($a, $new_vol + $orig_vol_2, 1)
						change_pan($a,$new_pan + $orig_pan_2,1)
						%multi_id_arr[$multi_cursor] := $a
						%multi_ix_array[$multi_cursor] := 0
						%multi_trans_arr[$multi_cursor] := $EVENT_NOTE - $multi_check_note
						%multi_note_arr[$multi_cursor] := $EVENT_NOTE
						if ($mono = 1)
							%multi_orig_id_arr[$multi_cursor] := $mono_id
							if ($auto = 0 and $portamento = 1)
								change_tune($a,$mono_pos - $multi_check_note*100000,1)
							end if
						else
							if (($auto = 0 or $hold_nr > 1) and $portamento = 1)
								change_tune($a,$cur_pos - $multi_check_note*100000,1)			
							end if
							%multi_orig_id_arr[$multi_cursor] := $multi_check_id
						end if
						
						%multi_orig_note_arr[$multi_cursor] := $multi_check_note
						if ($string_fade = 1)
							fade_out(%multi_id_arr[$multi_cursor],1,0)
							fade_in(%multi_id_arr[$multi_cursor],$Fade_sw)
						end if
						if ($dynamic_maker = 1)
							change_vol(%multi_id_arr[$multi_cursor],$vol_helper,1)
						end if
						$no_release_callback := $EVENT_ID
						
							if ($int_voices > 1)
								change_tune(%multi_id_arr[$multi_cursor],%tuning_array[0]- $orig_tune_2,1)
								change_pan(%multi_id_arr[$multi_cursor],%pan_array[0],1)
								change_vol(%multi_id_arr[$multi_cursor],$VOL_REDUCE*($int_voices-1),1)		
							end if
							inc($multi_cursor)
						
							$a := 1  
							while($a < $int_voices )
								$b := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,0)
								change_tune($b,%tuning_array[$a]+$new_tune,1)
								change_pan($b,%pan_array[$a],1)		
								change_pan($b,$new_pan,1)
								change_vol($b,$VOL_REDUCE*($int_voices-1)+$new_vol,1)		

								%multi_id_arr[$multi_cursor] := $b
								%multi_ix_array[$multi_cursor] := $a
								%multi_note_arr[$multi_cursor] := $EVENT_NOTE
								%multi_trans_arr[$multi_cursor] := $EVENT_NOTE - $multi_check_note
								if ($string_fade = 1)
									fade_out(%multi_id_arr[$multi_cursor],1,0)
									fade_in(%multi_id_arr[$multi_cursor],$Fade_sw)
								end if
								if ($dynamic_maker = 1)
									change_vol(%multi_id_arr[$multi_cursor],$vol_helper,1)
								end if
								if ($mono = 1)
									%multi_orig_id_arr[$multi_cursor] := $mono_id
									if ($auto = 0 and $portamento = 1)
										change_tune($b,$mono_pos - $multi_check_note*100000,1)
									end if
								else
									if (($auto = 0 or $hold_nr > 1) and $portamento = 1)
										change_tune($b,$cur_pos - $multi_check_note*100000,1)			
									end if
									%multi_orig_id_arr[$multi_cursor] := $multi_check_id
								end if
								%multi_orig_note_arr[$multi_cursor] := $multi_check_note
								inc($multi_cursor)
								inc($a)
							end while
						exit
					else
						$string_fade := 0
						$dynamic_maker := 0
					end if
					$organ_block := 0
					if (($hold_nr = 0 or $mono = 0) and $det > 0)
						$multi_check_time := $ENGINE_UPTIME
						$multi_check_id := $EVENT_ID
						$multi_check_note := $EVENT_NOTE
					end if
					if ($mono = 1)
						if ($ENGINE_UPTIME - $multi2_check_time < $det)
							ignore_event($EVENT_ID)
							$no_release_callback := $EVENT_ID
							exit		
						end if
						if ($det > 0)
							$multi2_check_time := $ENGINE_UPTIME
						end if
					end if
				end if
				set_event_par($EVENT_ID,0,0)
				%pressed_id[$EVENT_NOTE] := $EVENT_ID
				%pressed_velo[$EVENT_NOTE] := $EVENT_VELOCITY
				%last_id[$EVENT_NOTE] := $EVENT_ID
				$last_note  := $last_note_helper
				$last_note_helper := $EVENT_NOTE
				if (%hold_arr[$EVENT_NOTE] = 0)
					inc($hold_nr)
				end if
				inc(%hold_arr[$EVENT_NOTE])
				%id_arr[$cursor] := $EVENT_ID
				%note_arr[$cursor] := $EVENT_NOTE
				%velo_arr[$cursor] := $EVENT_VELOCITY
				%time_arr[$cursor] := $ENGINE_UPTIME
				$orig_tune := get_event_par($EVENT_ID,$EVENT_PAR_TUNE)
				$orig_pan := get_event_par($EVENT_ID,$EVENT_PAR_PAN)
				$orig_vol := get_event_par($EVENT_ID,$EVENT_PAR_VOLUME)
				%sos_state[$EVENT_NOTE] := %sos_state[$EVENT_NOTE] .or. 4
				inc($cursor)
				$poly_id := $EVENT_ID
				
				
				{**** Multi Part ****}
				$a := 0
				$b := $multi_cursor
				$multi_cursor := 0
				while($a < $b)
					if (event_status(%multi_id_arr[$a]) > 0)
						%multi_id_arr[$multi_cursor] := %multi_id_arr[$a]
						%multi_note_arr[$multi_cursor] := %multi_note_arr[$a]
						%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$a]
						%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$a]
						%multi_ix_array[$multi_cursor] := %multi_ix_array[$a]
						%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$a]
						inc($multi_cursor)
					end if
					inc($a)
				end while
				$int_voices := $uni_voices_knob

				%tuning_array[0] := $orig_tune
				%pan_array[0] := $orig_pan

				if ($int_voices > 1)
					if ($UNISONO_TUNE_MODE = 1 )
						%tuning_array[0] := -(($uni_detune_knob * $TUNE_MAX)/200) * ($int_voices-1)
					else
						%tuning_array[0] := -(($uni_detune_knob * $TUNE_MAX)/200)
					end if
					change_tune($EVENT_ID,%tuning_array[0],1)
					%tuning_array[0] := %tuning_array[0] + $orig_tune
					if ($SPREAD_OPT = 1)
						if ($int_voices > 1)
							%pan_array[0] := -$uni_spread_knob*10
						else
							%pan_array[0] := 0
						end if		
					else
						%pan_array[0] := 0
						if ($int_voices mod 2 = 0)
							%pan_array[0] := -$uni_spread_knob*10
						end if
					end if
					change_pan($EVENT_ID,%pan_array[0],0)
					change_pan($EVENT_ID,$new_pan,1)
					change_vol($EVENT_ID,$VOL_REDUCE*($int_voices-1),1)		
				end if
				$a := 1  
				while($a < $int_voices )
					$b := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,0)
					if ($UNISONO_TUNE_MODE = 1 )
						%tuning_array[$a] :=  (($uni_detune_knob * $TUNE_MAX*$a)/100)-(($uni_detune_knob * $TUNE_MAX)/200) * ($int_voices-1) + $orig_tune
					else
						%tuning_array[$a] := (($uni_detune_knob * $TUNE_MAX*$a)/100)/($int_voices-1)-(($uni_detune_knob * $TUNE_MAX)/100)/2	 + $orig_tune	
					end if
					if ($SPREAD_OPT = 1)
						%pan_array[$a] := ((2*$uni_spread_knob*$a)/($int_voices-1)-$uni_spread_knob)*10		 + $orig_pan
					else
						if ($a mod 2 = 0)
							%pan_array[$a] := -$uni_spread_knob*10 + $orig_pan
						else
							%pan_array[$a] := $uni_spread_knob*10 + $orig_pan
						end if
					end if
					change_tune($b,%tuning_array[$a]+$new_tune,1)
					change_pan($b,%pan_array[$a],1)		
					change_pan($b,$new_pan,1)
					change_vol($b,$VOL_REDUCE*($int_voices-1)+$new_vol+$orig_vol,1)		
					%multi_id_arr[$multi_cursor] := $b
					%multi_ix_array[$multi_cursor] := $a
					%multi_note_arr[$multi_cursor] := $EVENT_NOTE
					%multi_orig_id_arr[$multi_cursor] := $EVENT_ID
					%multi_orig_note_arr[$multi_cursor] := $EVENT_NOTE
					%multi_trans_arr[$multi_cursor] := 0
					inc($multi_cursor)
					inc($a)
				end while
				$mf_cursor := 0
				
				{**** Multi Part ****}	
				if ($mono = 1)
					if ($mono_leg_menu >= 0)
						disallow_group($mono_leg_menu)
					end if
					if ($mono_sus_menu >= 0)
						allow_group($mono_sus_menu)
					end if
					if ($last_mono # $mono)
						$a := 0 
						$helper := 500
						$helper2 := 0
						while($a < $cursor)
							if (abs($EVENT_NOTE - %note_arr[$a]) < abs($EVENT_NOTE - $helper) and %note_arr[$a] # $EVENT_NOTE)
								$helper := %note_arr[$a]
								$helper2 := $a
							end if
							inc($a)
						end while
						if ($helper < 128)
							$mono_id := %id_arr[$helper2]
							$mono_pos := %note_arr[$helper2] * 100000
							$mono_note := %note_arr[$helper2]
							$a := 0
							while($a < $cursor)
								if ($EVENT_ID # %id_arr[$a])
									if ($mono_id # %id_arr[$a] and $EVENT_ID # %id_arr[$a])
										fade_out(%id_arr[$a],$FADE_OUT_DEFAULT,1)
											%multi_func_id[$mf_cursor] := %id_arr[$a]
											%multi_func_type[$mf_cursor] := 1
											inc($mf_cursor)
									else
										%id_arr[0] := %id_arr[$a]
										%note_arr[0] := %note_arr[$a]
										%velo_arr[0] := %velo_arr[$a]
										%time_arr[0] := %time_arr[$a]
										$mono_id := %id_arr[$a]
										$mono_note := %note_arr[$a]
										$mono_pos := %note_arr[$a]*100000
									end if
								end if
								inc($a)
							end while
							$cursor := 1
							$orig_off_id := $mono_id
						else
							$mono_pos := $EVENT_NOTE * 100000
						end if
					end if
					$last_mono_id := $mono_id
					if ($mono_id = 0)
						$mono_start_time := $ENGINE_UPTIME
						if ($mono_key_up_button = 1 and $legato = 0)
							if ($mono_leg_menu >= 0)
								disallow_group($mono_leg_menu)
							end if
							if ($mono_sus_menu >= 0)
								allow_group($mono_sus_menu)
							end if
							$mono_id := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,0)
							set_event_par($mono_id,$EVENT_PAR_VOLUME,get_event_par($EVENT_ID,$EVENT_PAR_VOLUME))
							change_tune($mono_id,%tuning_array[0]+$new_tune,1)
							change_pan($mono_id,%pan_array[0],1)
							change_pan($mono_id,$new_pan,1)
							change_vol($mono_id,$VOL_REDUCE*($int_voices-1)+$new_vol,1)		
							if ($Auto > 0)
								$mono_pos := $EVENT_NOTE * 100000 + $new_tune
							end if
							$mono_note := $EVENT_NOTE
							ignore_event($EVENT_ID)				
								$ma := 0
								while($ma < $multi_cursor)
									if ($EVENT_ID = %multi_orig_id_arr[$ma])							
										ignore_event(%multi_id_arr[$ma])
										if ($EVENT_NOTE + %multi_trans_arr[$ma] > 127)
											$n_helper := 127
										else
											if ($EVENT_NOTE + %multi_trans_arr[$ma] < 0)
												$n_helper := 0
											else
												$n_helper := $EVENT_NOTE + %multi_trans_arr[$ma]										
											end if
										end if
										$a := play_note($n_helper,$EVENT_VELOCITY,0,0)
										set_event_par($a,$EVENT_PAR_VOLUME,get_event_par($EVENT_ID,$EVENT_PAR_VOLUME))
										change_tune($a,%tuning_array[%multi_ix_array[$ma]]+$new_tune,1)
										change_pan($a,%pan_array[%multi_ix_array[$ma]],1)
										change_pan($a,$new_pan,1)
										change_vol($a,$VOL_REDUCE*($int_voices-1)+$new_vol,1)		
										%multi_id_arr[$ma] := $a
										%multi_note_arr[$ma] := %multi_note_arr[$ma]
										%multi_orig_id_arr[$ma] := $mono_id
										%multi_orig_note_arr[$ma] := $EVENT_NOTE
									end if
									inc($ma)
								end while
							%id_arr[$cursor-1] := $mono_id		
						else
							$mono_id := $EVENT_ID
							if ($Auto > 0 or $portamento = 0)
								$mono_pos := $EVENT_NOTE * 100000 + $new_tune
							else
								if ($legato = 1)
									change_tune($mono_id,($mono_pos - $EVENT_NOTE * 100000)-$new_tune,1)
									change_pan($mono_id,$new_pan,1)
									%multi_func_id[$mf_cursor] := $mono_id
									%multi_func_para[$mf_cursor] := $mono_pos - $EVENT_NOTE * 100000-$new_tune
									%multi_func_type[$mf_cursor] := 4
									inc($mf_cursor)
								end if
							end if
							$mono_note := $EVENT_NOTE
						end if
					else
						if ($mono_leg_menu >= 0)
							allow_group($mono_leg_menu)
						end if
						if ($mono_sus_menu >= 0)
							disallow_group($mono_sus_menu)
						end if
						$helper := $EVENT_NOTE
						select ($mono_prio_menu)
							case 2  {low note}
								$a := 0
								while($a < $EVENT_NOTE)
									if (%pressed_id[$a] > 0)							
										$helper := $a
										$a := 128
									end if
									inc($a)
								end while
							case 3  {high note}
								$a := $EVENT_NOTE
								while($a < 128)
									if (%pressed_id[$a] > 0)							
										$helper := $a
									end if
									inc($a)
								end while
						end select
						if ($helper # $EVENT_NOTE)
							ignore_event($EVENT_ID)
								$ma := 0
								while($ma < $multi_cursor)
									if ($EVENT_ID = %multi_orig_id_arr[$ma])
										ignore_event(%multi_id_arr[$ma])
									end if
									inc($ma)
								end while
							exit
						else
							if ($mono_key_up_button = 0 and $mono_note # $EVENT_NOTE)
								%hold_arr[$mono_note] := 0
								dec($hold_nr)
							end if
							if ($legato = 1)
								ignore_event($EVENT_ID)
									%multi_func_id[$mf_cursor] := $EVENT_ID
									%multi_func_type[$mf_cursor] := 3
									inc($mf_cursor)
								if ($portamento = 0)
									change_tune($mono_id,$EVENT_NOTE*100000 - $mono_pos +$new_tune,1 )
										%multi_func_id[$mf_cursor] := $mono_id
										%multi_func_para[$mf_cursor] := $EVENT_NOTE*100000 - $mono_pos +$new_tune
										%multi_func_type[$mf_cursor] := 4
										inc($mf_cursor)
									$mono_pos := $EVENT_NOTE *100000+$new_tune
								end if
								$mono_note := $EVENT_NOTE
								%note_arr[0] := $EVENT_NOTE
							else
								if ($EVENT_NOTE = $mono_note)
									select ($voice_menu)
										case 0 to 1
											ignore_event($EVENT_ID)
												%multi_func_id[$mf_cursor] := $EVENT_ID
												%multi_func_type[$mf_cursor] := 3
												inc($mf_cursor)
											if ($voice_keyclick_menu > -1 and $voice_menu = 1)
												disallow_group(-1)
												allow_group($voice_keyclick_menu)
												$a := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,0)
												set_event_par($a,$EVENT_PAR_TUNE,get_event_par($EVENT_ID,$EVENT_PAR_TUNE))
												set_event_par($a,$EVENT_PAR_PAN,get_event_par($EVENT_ID,$EVENT_PAR_PAN))
												set_event_par($a,$EVENT_PAR_VOLUME,get_event_par($EVENT_ID,$EVENT_PAR_VOLUME))
												_will_never_terminate($a)
											end if
										case 2
											fade_out($EVENT_ID,1,0)	{the new note should be mute in the beginning }
												%multi_func_id[$mf_cursor] := $EVENT_ID
												%multi_func_type[$mf_cursor] := 5
												inc($mf_cursor)
											fade_in($EVENT_ID,$Fade_sw)	{fade in the new note}
												%multi_func_id[$mf_cursor] := $EVENT_ID
												%multi_func_para[$mf_cursor] := $fade_sw
												%multi_func_type[$mf_cursor] := 6
												inc($mf_cursor)
											fade_out($mono_id,$Fade_sw,1)
												%multi_func_id[$mf_cursor] := $mono_id
												%multi_func_para[$mf_cursor] := $fade_sw
												%multi_func_type[$mf_cursor] := 7
												inc($mf_cursor)
											$vol_helper := ($Dynamic * ($EVENT_VELOCITY - 64)) /64
											change_vol($EVENT_ID,$vol_helper+$new_vol,1)
												%multi_func_id[$mf_cursor] := $EVENT_ID
												%multi_func_para[$mf_cursor] := $vol_helper
												%multi_func_type[$mf_cursor] := 8
												inc($mf_cursor)
											$string_fade := 1
											$mono_id := $EVENT_ID
											$mono_note := $EVENT_NOTE
											$multi_check_time := $ENGINE_UPTIME
											$multi_check_note := $EVENT_NOTE
											$multi_check_id := $EVENT_ID
										case 3
											fade_out($mono_id,$Fade_synth_out,1)
												%multi_func_id[$mf_cursor] := $mono_id
												%multi_func_para[$mf_cursor] := $Fade_synth_out
												%multi_func_type[$mf_cursor] := 7
												inc($mf_cursor)
											$mono_id := $EVENT_ID
											$mono_note := $EVENT_NOTE
											$multi_check_time := $ENGINE_UPTIME
											$multi_check_note := $EVENT_NOTE
											$multi_check_id := $EVENT_ID
										case 4
											if ($Fadeout <10)
												fade_out($mono_id,$FADE_OUT_PIANO,1)
													%multi_func_id[$mf_cursor] := $mono_id
													%multi_func_para[$mf_cursor] := $FADE_OUT_PIANO
													%multi_func_type[$mf_cursor] := 7
													inc($mf_cursor)
											else
												fade_out($mono_id,($fadeout+5)*1000,1)								
													%multi_func_id[$mf_cursor] := $mono_id
													%multi_func_para[$mf_cursor] := $fadeout*1000
													%multi_func_type[$mf_cursor] := 7
													inc($mf_cursor)
											end if
											$vol_helper := ($Dynamic * ($EVENT_VELOCITY - 64)) /64
											change_vol($EVENT_ID,$vol_helper+$new_vol,1)
												%multi_func_id[$mf_cursor] := $EVENT_ID
												%multi_func_para[$mf_cursor] := $vol_helper
												%multi_func_type[$mf_cursor] := 8
												inc($mf_cursor)
											$mono_id := $EVENT_ID
											$mono_note := $EVENT_NOTE
											$multi_check_time := $ENGINE_UPTIME
											$multi_check_note := $EVENT_NOTE
											$multi_check_id := $EVENT_ID
									end select
								else
									$multi_helper := $mono_id
									if ($mono_mode_knob = 3)
										$Sample_offset := ($ENGINE_UPTIME - $mono_start_time)*1000
									else
										$Sample_offset := 0							
									end if
									$mono_id := play_note($EVENT_NOTE,$EVENT_VELOCITY,$Sample_offset,0)
									set_event_par($mono_id,$EVENT_PAR_VOLUME,get_event_par($EVENT_ID,$EVENT_PAR_VOLUME))
									change_tune($mono_id,%tuning_array[0]+$new_tune,1)
									change_pan($mono_id,%pan_array[0],1)
									change_pan($mono_id,$new_pan,1)
									change_vol($mono_id,$VOL_REDUCE*($int_voices-1)+$new_vol,1)		
									$mono_note := $EVENT_NOTE
									ignore_event($EVENT_ID)
									%id_arr[$cursor-1] := $mono_id		
									$ma := 0
										while($ma < $multi_cursor)
											if ($EVENT_ID = %multi_orig_id_arr[$ma])
												ignore_event(%multi_id_arr[$ma])
											end if
											if ($multi_helper = %multi_orig_id_arr[$ma])
												if ($EVENT_NOTE + %multi_trans_arr[$ma] > 127)
													$n_helper := 127
												else
													if ($EVENT_NOTE + %multi_trans_arr[$ma] < 0)
														$n_helper := 0
													else
														$n_helper := $EVENT_NOTE + %multi_trans_arr[$ma]										
													end if
												end if
												$a := play_note($n_helper,$EVENT_VELOCITY,$Sample_offset,0)
												set_event_par($a,$EVENT_PAR_VOLUME,get_event_par($EVENT_ID,$EVENT_PAR_VOLUME))
												change_tune($a,%tuning_array[%multi_ix_array[$ma]]+$new_tune,1)
												change_pan($a,%pan_array[%multi_ix_array[$ma]],1)
												change_pan($a,$new_pan,1)
												change_vol($a,$VOL_REDUCE*($int_voices-1)+$new_vol,1)		
												%multi_id_arr[$multi_cursor] := $a
												%multi_note_arr[$multi_cursor] := $EVENT_NOTE + %transp_array[%multi_ix_array[$ma]]
												%multi_orig_id_arr[$multi_cursor] := $mono_id
												%multi_orig_note_arr[$multi_cursor] := $EVENT_NOTE
												%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
												%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
												inc($multi_cursor)
											end if
											inc($ma)
										end while
									if ($mono_amp_rel_button = 1 and $last_mono_id # $orig_off_id)
										note_off($last_mono_id)
										set_event_par($last_mono_id,0,4)
										$ma := 0
										$b := $multi_cursor
										$multi_cursor := 0
										while($ma < $b)
											if ($last_mono_id = %multi_orig_id_arr[$ma])
												{fade_out(%multi_id_arr[$ma],10000,1)}
												note_off(%multi_id_arr[$ma])
												set_event_par(%multi_id_arr[$ma],0,4)
												{ignore_event(%multi_id_arr[$ma])}
											else
												%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
												%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
												%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
												%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
												%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
												%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
												inc($multi_cursor)									
											end if
											inc($ma)
										end while
									else
										fade_out($last_mono_id,($Fadeout+5)*1000,1)	
											$ma := 0
											$b := $multi_cursor
											$multi_cursor := 0
											while($ma < $b)
												if ($last_mono_id = %multi_orig_id_arr[$ma])
													fade_out(%multi_id_arr[$ma],($Fadeout+5)*1000,1)
												else
													%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
													%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
													%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
													%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
													%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
													%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
													inc($multi_cursor)									
												end if
												inc($ma)
											end while
										fade_out($mono_id,1,0)	
											%multi_func_id[$mf_cursor] := $mono_id
											%multi_func_type[$mf_cursor] := 5
											inc($mf_cursor)
										fade_in($mono_id,$Fadein*1000)	
											%multi_func_id[$mf_cursor] := $mono_id
											%multi_func_para[$mf_cursor] := $fadein*1000
											%multi_func_type[$mf_cursor] := 6
											inc($mf_cursor)
									end if
								end if
							end if
						end if
					end if
					$poly_id := $mono_id
				else
					select ($voice_menu)
						case 1
							if (%hold_arr[$EVENT_NOTE] > $maxHold)
								disallow_group(-1)
								if ($voice_keyclick_menu > -1)
									allow_group($voice_keyclick_menu)
								end if
								$ma := 0
								while($ma < $multi_cursor)
									if (%multi_orig_note_arr[$ma] = $EVENT_NOTE)
										ignore_event(%multi_id_arr[$ma])
									end if
									inc($ma)
								end while
								$organ_block := 1
							end if
						case 2
							if (%hold_arr[$EVENT_NOTE] > 1)
								fade_out($EVENT_ID,1,0)	{the new note should be mute in the beginning }
									%multi_func_id[$mf_cursor] := $EVENT_ID
									%multi_func_type[$mf_cursor] := 5
									inc($mf_cursor)
								fade_in($EVENT_ID,$Fade_sw)	{fade in the new note}
									%multi_func_id[$mf_cursor] := $EVENT_ID
									%multi_func_para[$mf_cursor] := $fade_sw
									%multi_func_type[$mf_cursor] := 6
									inc($mf_cursor)
								fade_out(%last2_id[$EVENT_NOTE],$Fade_sw,1)
									%multi_func_id[$mf_cursor] := %last2_id[$EVENT_NOTE]
									%multi_func_para[$mf_cursor] := $fade_sw
									%multi_func_type[$mf_cursor] := 7
									inc($mf_cursor)
								dec(%hold_arr[$EVENT_NOTE])
								$string_fade := 1
							else
								if ($hold_nr > 0)
									$a := $a
								end if
							end if
							$dynamic_maker := 1
							$vol_helper := ($Dynamic * ($EVENT_VELOCITY - 64)) /64
							change_vol($EVENT_ID,$vol_helper+$new_vol,1)
								%multi_func_id[$mf_cursor] := $EVENT_ID
								%multi_func_para[$mf_cursor] := $vol_helper
								%multi_func_type[$mf_cursor] := 8
								inc($mf_cursor)
						case 3
							if (%hold_arr[$EVENT_NOTE] > 1)
								fade_out(%last2_id[$EVENT_NOTE],$Fade_synth_out,1)
									%multi_func_id[$mf_cursor] := %last2_id[$EVENT_NOTE]
									%multi_func_para[$mf_cursor] := $fade_sw
									%multi_func_type[$mf_cursor] := 7
									inc($mf_cursor)
								dec(%hold_arr[$EVENT_NOTE])
							end if
						case 4
							if (%hold_arr[$EVENT_NOTE] > 1)
								$a := 0
								$helper := $cursor
								$cursor := 0
								while ($a < $helper)
									$virt_velo := ((%velo_arr[$a] * ($note_length-$ENGINE_UPTIME + %time_arr[$a]))/$note_length)
									if ($EVENT_VELOCITY > $virt_velo and $EVENT_ID # %id_arr[$a] and $EVENT_NOTE = %note_arr[$a])
										fade_out(%id_arr[$a],$FADE_OUT_PIANO,1)
											%multi_func_id[$mf_cursor] := %id_arr[$a]
											%multi_func_para[$mf_cursor] := $FADE_OUT_PIANO
											%multi_func_type[$mf_cursor] := 7
											inc($mf_cursor)
										dec(%hold_arr[$EVENT_NOTE])						
									else
										%id_arr[$cursor] := %id_arr[$a]
										%note_arr[$cursor] := %note_arr[$a]
										%velo_arr[$cursor] := %velo_arr[$a]
										%time_arr[$cursor] := %time_arr[$a]
										inc($cursor)						
									end if
									inc($a)
								end while
							end if
							$dynamic_maker := 1
							$vol_helper := ($Dynamic * ($EVENT_VELOCITY - 64)) /64
							change_vol($EVENT_ID,$vol_helper+$new_vol,1)
								%multi_func_id[$mf_cursor] := $EVENT_ID
								%multi_func_para[$mf_cursor] := $vol_helper
								%multi_func_type[$mf_cursor] := 8
								inc($mf_cursor)
					end select 		
				end if
				$a := 0
				while($a < $multi_cursor)
					$b := 0
					$c := 0
					while($b < $mf_cursor)
						if (%multi_func_id[$b] = %multi_orig_id_arr[$a])
							select(%multi_func_type[$b])
								case 1
									fade_out(%multi_id_arr[$a],$FADE_OUT_DEFAULT,1)
								case 3
									ignore_event(%multi_id_arr[$a])
								case 4
									change_tune(%multi_id_arr[$a],%multi_func_para[$b],1)
								case 5
									fade_out(%multi_id_arr[$a],1,0)
								case 6
									fade_in(%multi_id_arr[$a],%multi_func_para[$b])
								case 7
									fade_out(%multi_id_arr[$a],%multi_func_para[$b],1)
								case 8
									change_vol(%multi_id_arr[$a],%multi_func_para[$b]+$new_vol,1)
							end select
						end if
						inc($b)
					end while
					inc($a)
				end while
				
				%last2_id[$EVENT_NOTE] := $EVENT_ID
				if ($last_mono = 1)
					%last2_id[$EVENT_NOTE] := $mono_id
				end if
				$last_mono := $mono
				if ($portamento = 1)
					if (($hold_nr >=  $Auto and $mono = 1) or ($hold_nr >  $Auto and $mono = 0))
						$ziel_pos := $EVENT_NOTE * 100000+$new_tune
						if ($mono = 0)
							$a := 0
							$helper := 5000
							while($a < 128)
								if (%pressed_id[$a] > 0 and abs($a - $EVENT_NOTE) < abs($EVENT_NOTE - $helper) and $a # $EVENT_NOTE)
									$helper := $a
								end if
								inc($a)
							end while
							if ($helper > 127)
								$helper := $last_note
								if ($last_note < 0)
									$helper := $EVENT_NOTE
								end if
							end if
							$poly_tune_diff := $ziel_pos - $helper * 100000
							$cur_pos := $helper * 100000
						else
							$poly_tune_diff := $ziel_pos - $mono_pos			
						end if
						if ($mono = 0)
							change_tune($EVENT_ID,-$poly_tune_diff,1)
							$ma := 0
							while($ma < $multi_cursor)
								if ($EVENT_ID = %multi_orig_id_arr[$ma])
									change_tune(%multi_id_arr[$ma],-$poly_tune_diff,1)
								end if
								inc($ma)
							end while
						else
							if ($legato = 0)
								change_tune($mono_id,-$poly_tune_diff,1)			
								$ma := 0
								while($ma < $multi_cursor)
									if ($mono_id = %multi_orig_id_arr[$ma])
										change_tune(%multi_id_arr[$ma],-$poly_tune_diff,1)
									end if
									inc($ma)
								end while
							end if
						end if
						if ($poly_tune_diff < 0)
							$poly_direction := -1
						else
							$poly_direction := 1
						end if
						$poly_cur_diff := 0
						inc($loop_counter)
						$poly_checker := $loop_counter
						while(abs($poly_cur_diff) < abs($poly_tune_diff) and ($poly_checker = $loop_counter or $mono = 0))
							if ($porta_rel_glide_button = 1)
								if ($GlideRel = 0)
									$poly_interv := $poly_Tune_diff
								else
									$poly_interv := (1200000 / $GlideRel) *$poly_direction
									if (abs($poly_cur_diff + $poly_interv) > abs($poly_Tune_diff))
										$poly_interv := $poly_tune_diff - $poly_cur_diff
									end if
								end if
							else
								if ($Glideabs = 0)
									$poly_interv := $poly_Tune_diff
								else
									$poly_interv := ($poly_Tune_diff / $Glideabs)
									if (abs($poly_cur_diff + $poly_interv) > abs($poly_Tune_diff))
										$poly_interv := $poly_tune_diff - $poly_cur_diff
									end if
								end if							
							end if							
							$cur_pos := $cur_pos + $poly_interv
							$mono_pos := $mono_pos + $poly_interv
							$poly_cur_diff := $poly_cur_diff + $poly_interv
							change_tune($poly_id,$poly_interv,1)
								$ma := 0
								while($ma < $multi_cursor)
									if ($poly_id = %multi_orig_id_arr[$ma])
										change_tune(%multi_id_arr[$ma],$poly_interv,1)
									end if
									inc($ma)
								end while
							wait(1000)
						end while
					end if		
				end if
				wait(20000)
				$a := 0
				while($a < 128)
					if (%pressed_id[$a] > 0 and event_status(%pressed_id[$a]) = 0)
						%pressed_id[$a] := 0
						%sos_state[$a] := %sos_state[$a] .and. (.not. 4)
						if (%sos_state[$a] = 0 and %hold_arr[$a] > 0 )
							%hold_arr[$a] := 0
							dec($hold_nr)
						end if
					end if
					inc($a)
				end while
				$b := $multi_cursor
				$multi_cursor := 0
				$ma := 0
				while($ma < $b)
					if (event_status(%multi_orig_id_arr[$ma]) = 0)
						fade_out(%multi_id_arr[$ma],$FADE_OUT_DEFAULT,1)
					else
						%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
						%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
						%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
						%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
						%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
						%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
						inc($multi_cursor)					
					end if
					inc($ma)
				end while

			end if



			if ($selected_group = 3)
				if ($glide_on = 1)
					ignore_event($EVENT_ID)
					$newnote_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, $Start, -1)
					 $this_id_glideMono:= $newnote_id
					change_tune($newnote_id,$current_pitch - ($EVENT_NOTE*100000), 0)
					$target_pitch := $EVENT_NOTE * 100000
					$interval_cents := abs($target_pitch/1000 - $current_pitch/1000)
					if ($interval_cents > $Threshold * 100)
						$interval_cents := $Threshold * 100
					end if
					$actual_glide := $Glide + ($Glide * $interval_cents / 1200 * ($Scaling - 100) / 100)

					fade_out($newnote_id, 0, 1)
					fade_in ($newnote_id,$actual_glide)
					fade_out($currentnote_id, $actual_glide, 1)

					note_off($oldnote3_id)
					$oldnote3_id := $oldnote2_id
					$oldnote2_id := $oldnote1_id
					$oldnote1_id := $currentnote_id
					$currentnote_id := $newnote_id

					$pitch_shift := ($target_pitch - $current_pitch) / ($actual_glide / $pitch_change_interval)
					wait($pitch_change_interval)
					while(abs($target_pitch - $current_pitch) > abs($pitch_shift))
						if ($currentnote_id = $this_id_glideMono)
							change_tune($currentnote_id, $pitch_shift, 1)
							change_tune($oldnote1_id, $pitch_shift, 1)
							change_tune($oldnote2_id, $pitch_shift, 1)
							change_tune($oldnote3_id, $pitch_shift, 1)
							$current_pitch := $current_pitch + $pitch_shift
							wait($pitch_change_interval)
						else
							exit
						end if
					end while 
					if ($currentnote_id = $this_id_glideMono)
						$pitch_shift := $target_pitch - $current_pitch
						change_tune($currentnote_id, $pitch_shift, 1)
						change_tune($oldnote1_id, $pitch_shift, 1)
						change_tune($oldnote2_id, $pitch_shift, 1)
						change_tune($oldnote3_id, $pitch_shift, 1)
						$current_pitch := $target_pitch
					end if
				else
					$currentnote_id := $EVENT_ID
					$current_pitch := $EVENT_NOTE * 100000
					$glide_on := 1
				end if
			end if

			if ($selected_group = 4)
				if ($ECO_MODE = 1)
					$helper_tune := (%tune_ui[($EVENT_NOTE + 12 - $key_knobMicro) mod 12]*1000*$Amount)/100
					change_tune($EVENT_ID,$helper_tune,0)
				else
					while($NOTE_HELD= 1)
						$helper_tune := (%tune_ui[($EVENT_NOTE + 12 - $key_knobMicro) mod 12]*1000*$Amount)/100
						change_tune($EVENT_ID,$helper_tune,0)
						wait(15000)
					end while
				end if

			end if

			if ($selected_group = 5)
				select ($EVENT_VELOCITY)
					case 1 to 127
					set_key_color($EVENT_NOTE,$KEY_COLOR_WHITE)
				end select			

				if ($latch_mode = 0)
					exit
				end if
				%velo[$EVENT_NOTE] := $EVENT_VELOCITY
				{only one event per Note}
				set_event_par($EVENT_ID,0,2)
				if ($midi_thru = 0)
					ignore_event($EVENT_ID)
				end if
				if (%pressed_id_ARP[$EVENT_NOTE] > 0)
					exit
				else
					%pressed_id_ARP[$EVENT_NOTE] := $EVENT_ID
				end if
				
				{which notes should be in the buffer}
				select ($latch_mode)
					case 1
						%note_buffer[$cursor_ARP] := $EVENT_NOTE
						inc($cursor_ARP)
					case 2
						if ($ENGINE_UPTIME - $old_latch_time > $LATCH_TIME)
							$a_ARP := 0
							while($a_ARP < $cursor_ARP)
								%note_buffer[$a_ARP] := 0
								inc($a_ARP)
							end while
							$cursor_ARP := 0
						end if
						%note_buffer[$cursor_ARP] := $EVENT_NOTE
						inc($cursor_ARP)
						$old_latch_time := $ENGINE_UPTIME
					case 3
						$a_ARP := 0
						$b_ARP := $cursor_ARP
						$cursor_ARP := 0
						while($a_ARP < $b_ARP)
							if ($EVENT_NOTE # %note_buffer[$a_ARP])
								%note_buffer[$cursor_ARP] := %note_buffer[$a_ARP]
								inc($cursor_ARP)
							end if
							inc($a_ARP)
						end while
						if ($b_ARP = $cursor_ARP)
							%note_buffer[$cursor_ARP] := $EVENT_NOTE
							inc($cursor_ARP)				
						end if
				end select

				if ($cursor_ARP < 2 and $check_id = 0)
					$check_id := $EVENT_ID
					$aa := 0
					$act_step := 0
					$oct_cursor := 0
					$last_order := -1
					$swing_cursor := 0
					wait($REC_TIME*1000)	
					while($cursor_ARP > 0)
						$a_ARP := 0
						while($a_ARP < 128)
							if ($a_ARP < $cursor_ARP)
								%ordered[$a_ARP] := %note_buffer[$a_ARP]
							else
								%ordered[$a_ARP] := 0
								%note_buffer[$a_ARP] := 0
							end if
							inc($a_ARP)
						end while
						$min_note := %ordered[$cursor_ARP-1]
						$max_note := %ordered[0]
						sort(%ordered,1)
						select ($note_order)
							case 1
								$loop_cursor := $cursor_ARP
								$a_ARP := 0
								while($a_ARP < $cursor_ARP)
									%loop_buffer[$a_ARP] := %note_buffer[$a_ARP]
									inc($a_ARP)
								end while					
							case 2	{up }
								$loop_cursor := $cursor_ARP
								$a_ARP := 0
								while($a_ARP < $cursor_ARP )
									%loop_buffer[$a_ARP] := %ordered[$cursor_ARP - 1 - $a_ARP]
									inc($a_ARP)
								end while
							case 3	{down }
								$loop_cursor := $cursor_ARP
								$a_ARP := 0
								while($a_ARP < $cursor_ARP )
									%loop_buffer[$a_ARP] := %ordered[$a_ARP]
									inc($a_ARP)
								end while
							case 4	{up_down }
								$loop_cursor := $cursor_ARP
								$a_ARP := 0
								while($a_ARP < $cursor_ARP )
									%loop_buffer[$a_ARP] := %ordered[$cursor_ARP -1 - $a_ARP]
									inc($a_ARP)
								end while
								if ($cursor_ARP > 2)
									select ($repeat)
										case 1
											$loop_cursor := ($cursor_ARP*2)-2
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2 )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$a_ARP+1]
												inc($a_ARP)
											end while
										case 2
											$loop_cursor := ($cursor_ARP*2)-1
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-1 )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$a_ARP]
												inc($a_ARP)
											end while
										case 3
											$loop_cursor := ($cursor_ARP*2)-1
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-1 )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$a_ARP+1]
												inc($a_ARP)
											end while
										case 5
											$loop_cursor := ($cursor_ARP*2)
											$a_ARP := 0
											while($a_ARP < $cursor_ARP )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$a_ARP]
												inc($a_ARP)
											end while
									end select
								end if
							case 5	{down_up }
								$loop_cursor := $cursor_ARP
								$a_ARP := 0
								while($a_ARP < $cursor_ARP )
									%loop_buffer[$a_ARP] := %ordered[$a_ARP]
									inc($a_ARP)
								end while
								if ($cursor_ARP > 2)
									select ($repeat)
										case 1
											$loop_cursor := ($cursor_ARP*2)-2
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2 )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$cursor_ARP -2- $a_ARP]
												inc($a_ARP)
											end while
										case 3
											$loop_cursor := ($cursor_ARP*2)-1
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-1 )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$cursor_ARP -1 - $a_ARP]
												inc($a_ARP)
											end while
										case 2
											$loop_cursor := ($cursor_ARP*2)-1
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-1 )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$cursor_ARP -2- $a_ARP]
												inc($a_ARP)
											end while
										case 5
											$loop_cursor := ($cursor_ARP*2)
											$a_ARP := 0
											while($a_ARP < $cursor_ARP )
												%loop_buffer[$a_ARP+$cursor_ARP] := %ordered[$cursor_ARP -1- $a_ARP]
												inc($a_ARP)
											end while
									end select
								end if
							case 6	{zickzack up}
								if ($cursor_ARP = 1)
									%loop_buffer[0] := $min_note
									$loop_cursor := 1
								end if
								if ($cursor_ARP = 2)
									%loop_buffer[0] := $min_note
									%loop_buffer[1] := $max_note
									$loop_cursor := 2
								end if
								if ($cursor_ARP = 3)
									%loop_buffer[0] := %ordered[2]
									%loop_buffer[1] := %ordered[0]
									%loop_buffer[2] := %ordered[1]
									$loop_cursor := 3
								end if
								if ($cursor_ARP > 3)
									$a_ARP := 0
									while($a_ARP < $cursor_ARP-2)
										%loop_buffer[($a_ARP*2)] :=	%ordered[$cursor_ARP-$a_ARP-1]
										%loop_buffer[($a_ARP*2)+1] :=%ordered[$cursor_ARP-$a_ARP-3]
										inc($a_ARP)
									end while
									$loop_cursor := (2*$cursor_ARP)-4
								end if
							case 7	{zickzack_down }
								if ($cursor_ARP = 1)
									%loop_buffer[0] := $min_note
									$loop_cursor := 1
								end if
								if ($cursor_ARP = 2)
									%loop_buffer[0] := $max_note
									%loop_buffer[1] := $min_note
									$loop_cursor := 2
								end if
								if ($cursor_ARP = 3)
									%loop_buffer[0] := %ordered[0]
									%loop_buffer[1] := %ordered[2]
									%loop_buffer[2] := %ordered[1]
									$loop_cursor := 3
								end if
								if ($cursor_ARP > 3)
									$a_ARP := 0
									while($a_ARP < $cursor_ARP-2)
										%loop_buffer[($a_ARP*2)] :=	%ordered[$a_ARP]
										%loop_buffer[($a_ARP*2)+1] :=%ordered[$a_ARP+2]
										inc($a_ARP)
									end while
									$loop_cursor := (2*$cursor_ARP)-4
								end if
							case 8	{zickzack updn}
								if ($cursor_ARP = 1)
									%loop_buffer[0] := $min_note
									$loop_cursor := 1
								end if
								if ($cursor_ARP = 2)
									%loop_buffer[0] := $min_note
									%loop_buffer[1] := $max_note
									$loop_cursor := 2
								end if
								if ($cursor_ARP = 3)
									select($repeat)
										case 1
											%loop_buffer[0] := %ordered[2]
											%loop_buffer[1] := %ordered[0]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[0]
											$loop_cursor := 4
										case 3
											%loop_buffer[0] := %ordered[2]
											%loop_buffer[1] := %ordered[0]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[1]
											%loop_buffer[4] := %ordered[0]
											$loop_cursor := 5
										case 2
											%loop_buffer[0] := %ordered[2]
											%loop_buffer[1] := %ordered[0]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[0]
											%loop_buffer[4] := %ordered[2]
											$loop_cursor := 5
										case 5
											%loop_buffer[0] := %ordered[2]
											%loop_buffer[1] := %ordered[0]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[1]
											%loop_buffer[4] := %ordered[0]
											%loop_buffer[5] := %ordered[2]
											$loop_cursor := 6
									end select
								end if
								if ($cursor_ARP > 3)
									select ($repeat)
										case 1
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$cursor_ARP-$a_ARP-1]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$cursor_ARP-$a_ARP-3]
												inc($a_ARP)
											end while
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)] :=	%ordered[$a_ARP+2]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=%ordered[$a_ARP+1]
												inc($a_ARP)
											end while
											$loop_cursor := (4*$cursor_ARP)-10
										case 2
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$cursor_ARP-$a_ARP-1]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$cursor_ARP-$a_ARP-3]
												inc($a_ARP)
											end while
											%loop_buffer[($cursor_ARP-2)*2] :=%ordered[0]
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=	%ordered[$a_ARP+2]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+2] :=%ordered[$a_ARP+1]
												inc($a_ARP)
											end while
											$loop_cursor := (4*$cursor_ARP)-9
										case 3
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$cursor_ARP-$a_ARP-1]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$cursor_ARP-$a_ARP-3]
												inc($a_ARP)
											end while
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)] :=	%ordered[$a_ARP+2]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=%ordered[$a_ARP+1]
												inc($a_ARP)
											end while
											%loop_buffer[(4*$cursor_ARP)-9-1] :=%ordered[$cursor_ARP-1]
											$loop_cursor := (4*$cursor_ARP)-9
										case 5
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$cursor_ARP-$a_ARP-1]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$cursor_ARP-$a_ARP-3]
												inc($a_ARP)
											end while
											%loop_buffer[($cursor_ARP-2)*2] :=%ordered[0]
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=	%ordered[$a_ARP+2]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+2] :=%ordered[$a_ARP+1]
												inc($a_ARP)
											end while
											%loop_buffer[(4*$cursor_ARP)-8-1] :=%ordered[$cursor_ARP-1]
											$loop_cursor := (4*$cursor_ARP)-8
									end select
								end if
							case 9
								if ($cursor_ARP = 1)
									%loop_buffer[0] := $min_note
									$loop_cursor := 1
								end if
								if ($cursor_ARP = 2)
									%loop_buffer[0] := $max_note
									%loop_buffer[1] := $min_note
									$loop_cursor := 2
								end if
								if ($cursor_ARP = 3)
									select($repeat)
										case 1
											%loop_buffer[0] := %ordered[0]
											%loop_buffer[1] := %ordered[2]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[2]
											$loop_cursor := 4
										case 3
											%loop_buffer[0] := %ordered[0]
											%loop_buffer[1] := %ordered[2]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[1]
											%loop_buffer[4] := %ordered[2]
											$loop_cursor := 5
										case 2
											%loop_buffer[0] := %ordered[0]
											%loop_buffer[1] := %ordered[2]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[2]
											%loop_buffer[4] := %ordered[0]
											$loop_cursor := 5
										case 5
											%loop_buffer[0] := %ordered[0]
											%loop_buffer[1] := %ordered[2]
											%loop_buffer[2] := %ordered[1]
											%loop_buffer[3] := %ordered[1]
											%loop_buffer[4] := %ordered[2]
											%loop_buffer[5] := %ordered[0]
											$loop_cursor := 6
									end select
								end if
								if ($cursor_ARP > 3)
									select ($repeat)
										case 1
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$a_ARP]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$a_ARP+2]
												inc($a_ARP)
											end while
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)] :=	%ordered[$cursor_ARP-$a-3]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=%ordered[$cursor_ARP-$a_ARP-2]
												inc($a_ARP)
											end while
											$loop_cursor := (4*$cursor_ARP)-10
										case 3
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$a_ARP]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$a_ARP+2]
												inc($a_ARP)
											end while
											%loop_buffer[($cursor_ARP-2)*2] :=%ordered[$cursor_ARP-1]
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=	%ordered[$cursor_ARP - $a_ARP-3]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+2] :=%ordered[$cursor_ARP - $a_ARP-2]
												inc($a_ARP)
											end while
											$loop_cursor := (4*$cursor_ARP)-9
										case 2
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$a_ARP]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$a_ARP+2]
												inc($a_ARP)
											end while
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)] :=	%ordered[$cursor_ARP-$a_ARP-3]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=%ordered[$cursor_ARP-$a_ARP-2]
												inc($a_ARP)
											end while
											%loop_buffer[(4*$cursor_ARP)-9-1] :=%ordered[0]
											$loop_cursor := (4*$cursor_ARP)-9
										case 5
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP*2)] :=	%ordered[$a_ARP]
												%loop_buffer[($a_ARP*2)+1] :=%ordered[$a_ARP+2]
												inc($a_ARP)
											end while
											%loop_buffer[($cursor_ARP-2)*2] :=%ordered[$cursor_ARP-1]
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-3)
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+1] :=	%ordered[$cursor_ARP - $a_ARP-3]
												%loop_buffer[($a_ARP*2)+(($cursor_ARP-2)*2)+2] :=%ordered[$cursor_ARP - $a_ARP-2]
												inc($a_ARP)
											end while
											%loop_buffer[(4*$cursor_ARP)-8-1] :=%ordered[0]
											$loop_cursor := (4*$cursor_ARP)-8
									end select
								end if

							case 10 to 13
								$loop_cursor := $cursor_ARP
								$a_ARP := 0
								while(($a_ARP*2) < $cursor_ARP)
									%loop_buffer[($a_ARP*2)] := %ordered[$cursor_ARP -1 -$a_ARP]
									%loop_buffer[($a_ARP*2)+1] := %ordered[$a_ARP]
									inc($a_ARP)
								end while
								$loop_cursor := $cursor_ARP
								if ($note_order = 11 or $note_order = 13)
									$a_ARP := 0
									while($a_ARP < $loop_cursor)
										%help_buffer[$loop_cursor - $a_ARP-1] := %loop_buffer[$a_ARP]
										inc($a_ARP)
									end while
									$a_ARP := 0
									while($a_ARP < $loop_cursor)
										%loop_buffer[$a_ARP] := %help_buffer[$a_ARP]
										inc($a_ARP)
									end while
								end if
								if (($note_order = 12 or $note_order = 13) and $cursor_ARP > 2)
									select ($repeat)
										case 1
											$a_ARP := 0
											while($a_ARP < $cursor_ARP-2)
												%loop_buffer[($a_ARP)+($cursor_ARP)] := %loop_buffer[$cursor_ARP-2-$a_ARP]
												inc($a_ARP)
											end while
											$loop_cursor := $cursor_ARP*2 - 2
										case 2
											if ($note_order = 12)
												$a_ARP := 0
												while($a_ARP < $cursor_ARP-1)
													%loop_buffer[($a_ARP)+($cursor_ARP)] := %loop_buffer[$cursor_ARP-1-$a_ARP]
													inc($a_ARP)
												end while
												$loop_cursor := $cursor_ARP*2 - 1
											else
												$a_ARP := 0
												while($a_ARP < $cursor_ARP-1)
													%loop_buffer[($a_ARP)+($cursor_ARP)] := %loop_buffer[$cursor_ARP-2-$a_ARP]
													inc($a_ARP)
												end while
												$loop_cursor := $cursor_ARP*2 - 1
											end if
										case 3
											if ($note_order = 13)
												$a_ARP := 0
												while($a_ARP < $cursor_ARP-1)
													%loop_buffer[($a_ARP)+($cursor_ARP)] := %loop_buffer[$cursor_ARP-1-$a_ARP]
													inc($a_ARP)
												end while
												$loop_cursor := $cursor_ARP*2 - 1
											else
												$a_ARP := 0
												while($a_ARP < $cursor_ARP-1)
													%loop_buffer[($a_ARP)+($cursor_ARP)] := %loop_buffer[$cursor_ARP-2-$a_ARP]
													inc($a_ARP)
												end while
												$loop_cursor := $cursor_ARP*2 - 1
											end if
										case 5
											$a_ARP := 0
											while($a_ARP < $cursor_ARP)
												%loop_buffer[($a_ARP)+($cursor_ARP)] := %loop_buffer[$cursor_ARP-1-$a_ARP]
												inc($a_ARP)
											end while
											$loop_cursor := $cursor_ARP*2
									end select
								end if
							case 14
								$loop_cursor := 1
								%loop_buffer[$aa+1] := %ordered[random(0,$cursor_ARP-1)]
								%loop_buffer[0] := %ordered[random(0,$cursor_ARP-1)]
							case 15
								if ($aa < 2 or $last_order # $note_order)
									$loop_cursor := $cursor_ARP
									$a_ARP := 0
									while($a_ARP < $cursor_ARP)
										%help_buffer[$a_ARP] := %ordered[$a_ARP]
										inc($a_ARP)
									end while
									$helper_ARP := $cursor_ARP
									$a_ARP := 0
									while ($a_ARP < $cursor_ARP)
										%loop_buffer[$a_ARP] := %help_buffer[random(0,$helper_ARP-1)]
										$bb := 0
										while($bb < $helper_ARP)
											if (%help_buffer[$bb] = %loop_buffer[$a_ARP])
												while($bb < $helper_ARP)
													%help_buffer[$bb] := %help_buffer[$bb+1]
													inc($bb)
												end while
												$bb := $helper_ARP+1
												dec($helper_ARP)
											end if
											inc($bb)
										end while
										inc($a_ARP)
									end while
								end if
							case 16
								$loop_cursor := $cursor_ARP
								$a_ARP := 0
								while($a_ARP < $cursor_ARP )
									%loop_buffer[$a_ARP] := %note_buffer[$a_ARP]
									inc($a_ARP)
								end while
						end select
						$last_order := $note_order

								select ($Sync_knob)
									case 0
										$step_length := $DURATION_SIXTEENTH/8
									case 1
										$step_length := $DURATION_SIXTEENTH/4
									case 2
										$step_length := $DURATION_SIXTEENTH/2
									case 3
										$step_length := $DURATION_QUARTER/6
									case 4
										$step_length := ($DURATION_SIXTEENTH/4)*3
									case 5
										$step_length := $DURATION_SIXTEENTH
									case 6
										$step_length := $DURATION_QUARTER/3
									case 7
										$step_length := ($DURATION_SIXTEENTH/2)*3
									case 8
										$step_length := $DURATION_EIGHTH
									case 9
										$step_length := ($DURATION_QUARTER*2)/3
									case 10
										$step_length := $DURATION_SIXTEENTH*3
									case 11
										$step_length := $DURATION_QUARTER
									case 12
										$step_length := ($DURATION_QUARTER*4)/3
									case 13
										$step_length := $DURATION_EIGHTH*3
									case 14
										$step_length := $DURATION_QUARTER*2
									case 15
										$step_length := $DURATION_QUARTER*3
									case 16
										$step_length := $DURATION_QUARTER*4
									case 17
										$step_length := $DURATION_BAR
								end select					
						if ($swing_cursor mod 2 = 0)
							$step_length := $step_length + ($step_length*$Swing)/100
						else
							$step_length := $step_length + ($step_length*(-$Swing))/100			
						end if
						inc($swing_cursor)
						$duration := ($step_length/100)*$dur
						if ($duration < 10000)
							$duration := 10000
						end if
						if ($step_length < 5000)
							$step_length := 5000
						end if
						$velo := 100
						if (%rhythm[$act_step] # 0)
							if ($loop_cursor # 0)
								if ($note_order = 16)
									$a_ARP := 0
									while($a_ARP < $loop_cursor)
										$note := %loop_buffer[$a_ARP] + $oct_cursor*12
										$velo := %velo[%loop_buffer[$a_ARP]]
										if ($strike_count > 0)
											$velo := ($velo * $Str_vel)/100
										end if
										if ($velo_button = 1)
											$velo := 127
										end if
										$velo := ($velo * %rhythm[$act_step])/100
										if ($velo > 127)
											$velo := 127
										end if
										if ($velo < 1)
											$velo := 1
										end if
										if ($note > 0 and $note < 128)
											play_note($note,$velo,0,$duration)
										end if
										inc($a_ARP)
									end while
									if ($strike_count >= $strike-1)
										$aa := $loop_cursor
									end if
								else
									$note := %loop_buffer[$aa] + $oct_cursor*12
									$velo := %velo[%loop_buffer[$aa]]
									if ($strike_count > 0)
										$velo := ($velo * $Str_vel)/100
									end if
									if ($velo_button = 1)
										$velo := 127
									end if
									$velo := ($velo * %rhythm[$act_step])/100
									if ($velo > 127)
										$velo := 127
									end if
									if ($velo < 1)
										$velo := 1
									end if
									
									if ($note > 0 and $note < 128)
										play_note($note,$velo,0,$duration)
									end if
								end if
							end if
							if ($strike_count < $strike-1)
								dec($aa)
								dec($act_step)
								inc($strike_count)
							else
								$strike_count := 0
							end if
						else

							if ($strike_count < $strike-1)
								dec($act_step)
								inc($strike_count)
							else
								$strike_count := 0
							end if
							dec($aa)
						end if
						inc($aa)
						if ($aa >= $loop_cursor)
							$aa := 0
							if ($octave > 0 )
								inc($oct_cursor)
								if ($oct_cursor > $Octave)
									$oct_cursor := 0
								end if
							end if
							if ($octave < 0 )
								dec($oct_cursor)
								if ($oct_cursor < $Octave)
									$oct_cursor := 0
								end if
							end if
						end if
						inc($act_step)
						if ($act_step >= $steps)
							$act_step := 0
						end if
						wait($step_length)
					end while
					$check_id := 0
				end if

			end if

		end on

		{ - on note end - }

		{ - on release - }

		on release
			set_key_color($EVENT_NOTE,$KEY_COLOR_BLACK)

			{ - Sustain Pedal - }
	
			{ - Sustain Pedal end - }
				
			{ - midiMonitor - }
			if ($verbose_button = 0)
				if ($Note_Off = 1)
					set_text ($display, "Note Off: " & !note_names_MIDI[$EVENT_NOTE mod 12]  & ($EVENT_NOTE / 12) - 2 & "  (" & $EVENT_NOTE & ")")
				end if
				else
				{----- Verbose Mode -----}
				if ($Note_Off = 1)
					add_text_line ($display, "Note Off: " & !note_names_MIDI[$EVENT_NOTE mod 12] & ($EVENT_NOTE / 12) - 2 & "  (" & $EVENT_NOTE & ")")
				end if
			end if

			{ - midiMonitor end - }

			if ($selected_group = 2)
				if (not in_range($EVENT_NOTE,$MIN_KEY,$MAX_KEY))
					exit
				end if
				
				
				if ($no_release_callback = $EVENT_ID)
					ignore_event($EVENT_ID)
					exit
				end if
				if ($EVENT_ID = %pressed_id[$EVENT_NOTE])
					%pressed_id[$EVENT_NOTE] := 0
					%sos_state[$EVENT_NOTE] := %sos_state[$EVENT_NOTE] .and. (.not. 4)
				end if	
				if (%EVENT_PAR[0] = 4)
						$a := 0
						$b := $multi_cursor
						$multi_cursor := 0
						$ma := 0
						while($ma < $b)
							if ($EVENT_ID = %multi_orig_id_arr[$ma])
								note_off(%multi_id_arr[$ma])
							else
								%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
								%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
								%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
								%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
								%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
								%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
								inc($multi_cursor)					
							end if
							inc($ma)
						end while
						exit
				end if
				if (%EVENT_PAR[0] = 3)
					ignore_event($EVENT_ID)
					exit
				end if
					$ignore_multi := 1
				if (%sos_state[$EVENT_NOTE] = 0 and %hold_arr[$EVENT_NOTE] > 0 )
					%hold_arr[$EVENT_NOTE] := 0
					dec($hold_nr)
				end if
				if (%hold_arr[$EVENT_NOTE] > 0)
					ignore_event($EVENT_ID)
				end if
				if (%EVENT_PAR[0] = 6)
					ignore_event($EVENT_ID)
					exit
				end if
				if ($last_mono = 1)
					if ($EVENT_NOTE # $mono_note)
						ignore_event($EVENT_ID)
						exit
					end if
					if ($mono_key_up_button = 0)
						if (%hold_arr[$mono_note] = 0)
							note_off($mono_id)
							set_event_par($mono_id,0,4)
								$ma := 0
								$b := $multi_cursor
								$multi_cursor := 0
								while($ma < $b)
									if ($mono_id = %multi_orig_id_arr[$ma] or event_status(%multi_id_arr[$ma]) = 0)
										note_off(%multi_id_arr[$ma])
										set_event_par(%multi_id_arr[$ma],0,4)
									else
										%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
										%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
										%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
										%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
										%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
										%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
										inc($multi_cursor)
									end if
									inc($ma)
								end while
							$mono_id := 0
							$cursor := 0
							$mono_nr := 0
						else
							ignore_event($EVENT_ID)
						end if
					else
						if ($hold_nr > 0)
							select ($mono_prio_menu)
								case 0  {find next note}
									$a := 0
									$helper := 5000
									while($a < 128)
										if (%pressed_id[$a] > 0 and abs($a - $EVENT_NOTE) < abs($EVENT_NOTE - $helper) and $a # $EVENT_NOTE)
											$helper := $a
										end if
										inc($a)
									end while
								case 1  {last note}
									$a := 0
									$helper := 5000
									$helper2 := 0
									while($a < 128)
										if (%pressed_id[$a] > 0 and %last_id[$a] > $helper2  and $a # $EVENT_NOTE)							
											$helper2 := %last_id[$a]
											$helper := $a
										end if
										inc($a)
									end while
								case 2  {low note}
									$a := 0
									$helper := 5000
									while($a < 128)
										if (%pressed_id[$a] > 0 and $a # $EVENT_NOTE)							
											$helper := $a
											$a := 128
										end if
										inc($a)
									end while
								case 3  {high note}
									$a := 0
									$helper := 5000
									while($a < 128)
										if (%pressed_id[$a] > 0 and $a # $EVENT_NOTE)							
											$helper := $a
										end if
										inc($a)
									end while
							end select
							if ($helper < 128) 
								if (%pressed_id[$helper] = %bad_retrigger_id[$helper] and %pressed_id[$helper] > 0)
									note_off($mono_id)
									set_event_par($mono_id,0,4)
										$ma := 0
										$b := $multi_cursor
										$multi_cursor := 0
										while($ma < $b)
											if ($mono_id = %multi_orig_id_arr[$ma] or event_status(%multi_id_arr[$ma]) = 0)
												note_off(%multi_id_arr[$ma])
												set_event_par(%multi_id_arr[$ma],0,4)
											else
												%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
												%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
												%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
												%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
												%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
												%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
												inc($multi_cursor)
											end if
											inc($ma)
										end while
									$mono_id := 0
									$cursor := 0
									$mono_nr := 0
									exit
								end if
								$mono_note := $helper
								
								$new_tune := random (-1000,1000) * $hum_Tuning
								$new_vol := random (-60,60) * $hum_Volume
								$new_pan := random (-$hum_Pan*15,$hum_Pan*15)
								if ($legato = 1)
									if ($portamento = 0)
										change_tune($mono_id,($mono_note*100000)-$mono_pos+$new_tune ,1 )
										change_pan($mono_id,$new_pan,1)
											$ma := 0
											while($ma < $multi_cursor)
												if ($mono_id = %multi_orig_id_arr[$ma])
													change_tune(%multi_id_arr[$ma],($mono_note*100000)-$mono_pos+$new_tune,1)
												end if
												inc($ma)
											end while
										$mono_pos := $mono_note*100000+$new_tune
									else
										$poly_id := $mono_id
									end if
									$exit_after_portamento := 0
									if (%pressed_id[$mono_note] > 0 )
										ignore_event($EVENT_ID)
										$exit_after_portamento := 1
									end if
								else
									if ($mono_amp_rel_button = 0)
										if ($Fadeout > 9)
											fade_out($mono_id,($FadeOut+5)*1000,1)	
											ignore_event($mono_id)
										end if					
									else
										note_off($mono_id)
									end if
										$multi_helper := $mono_id
									if ($mono_mode_knob = 3)
										$Sample_offset := ($ENGINE_UPTIME - $mono_start_time)*1000
									else
										$Sample_offset := 0							
									end if
									if ($mono_leg_menu >= 0)
										allow_group($mono_leg_menu)
									end if
									if ($mono_sus_menu >= 0)
										disallow_group($mono_sus_menu)
									end if
									$new_vol := random (-60,60) * $hum_Volume
									if ($mono_retrig_velo_menu = 0)
										
										$new_tune := random (-1000,1000) * $hum_Tuning
										$new_velo := %pressed_velo[$helper] + (random (-127,127) * $hum_Velocity / 200)	
										if ($new_velo > 127)
											$new_velo := 127
										end if
										if ($new_velo < 1)
											$new_velo := 1
										end if
										$mono_id := play_note($helper,$new_velo,$Sample_offset,0)
									else
										
										$new_tune := random (-1000,1000) * $hum_Tuning
										$new_velo := %pressed_velo[$EVENT_NOTE] + (random (-127,127) * $hum_Velocity / 200)	
										if ($new_velo > 127)
											$new_velo := 127
										end if
										if ($new_velo < 1)
											$new_velo := 1
										end if
										$mono_id := play_note($helper,$new_velo,$Sample_offset,0)							
									end if
									set_event_par($mono_id,$EVENT_PAR_VOLUME,get_event_par($EVENT_ID,$EVENT_PAR_VOLUME))
									change_tune($mono_id,%tuning_array[0]+$new_tune,1)
									change_pan($mono_id,%pan_array[0],1)
									change_pan($mono_id,$new_pan,1)
									change_vol($mono_id,$VOL_REDUCE*($int_voices-1)+$new_vol,1)		
									if ($mono_amp_rel_button = 0)
										fade_out($mono_id,1,0)	
										fade_in($mono_id,($FadeIn+5)*1000)	
									end if
											$ma := 0
											$b := $multi_cursor
											$multi_cursor := 0
											while($ma < $b)
												if ($multi_helper = %multi_orig_id_arr[$ma])
													if ($mono_amp_rel_button = 0)
														fade_out(%multi_id_arr[$ma],($FadeOut+5)*1000,1)	
														$ignore_multi := 1
													else
														note_off(%multi_id_arr[$ma])												
													end if
													if ($mono_retrig_velo_menu = 0)
														%multi_id_arr[$ma] := play_note($helper+%multi_trans_arr[$ma],$new_velo,$Sample_offset,0)
														change_tune(%multi_id_arr[$ma],%tuning_array[%multi_ix_array[$ma]]+$new_tune,1)
														change_pan(%multi_id_arr[$ma],%pan_array[%multi_ix_array[$ma]],1)
														change_pan(%multi_id_arr[$ma],$new_pan,1)
														change_vol(%multi_id_arr[$ma],$VOL_REDUCE*($int_voices-1)+$new_vol+$orig_vol,1)		
													else
														%multi_id_arr[$ma] := play_note($helper+%multi_trans_arr[$ma],$new_velo,$Sample_offset,0)							
														change_tune(%multi_id_arr[$ma],%tuning_array[%multi_ix_array[$ma]]+$new_tune,1)
														change_pan(%multi_id_arr[$ma],%pan_array[%multi_ix_array[$ma]],1)
														change_pan(%multi_id_arr[$ma],$new_pan,1)
														change_vol(%multi_id_arr[$ma],$VOL_REDUCE*($int_voices-1)+$new_vol+$orig_vol,1)		
													end if
													
													if ($FadeIn > 9 and $mono_amp_rel_button = 0)
														fade_out(%multi_id_arr[$ma],1,0)	
														fade_in(%multi_id_arr[$ma],$FadeIn*1000)	
													end if
													%multi_orig_id_arr[$ma] := $mono_id
													inc($multi_cursor)										
												else
													%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
													%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
													%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
													%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
													%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
													%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
													inc($multi_cursor)										
												end if
												inc($ma)
											end while
									$poly_id := $mono_id
									$mono_note := $helper
									%id_arr[0] := $mono_id
									%note_arr[0] := $helper
									%velo_arr[0] := %velo_arr[$a]
									%time_arr[0] := $ENGINE_UPTIME
									$cursor := 1
								end if		
								if ($portamento = 1)
									$ziel_pos := $mono_note * 100000 + $new_tune
									$poly_tune_diff := $ziel_pos - $mono_pos			
									if ($legato = 0)
										change_tune($poly_id,-$poly_tune_diff,1)
											$ma := 0
											while($ma < $multi_cursor)
												if ($poly_id = %multi_orig_id_arr[$ma])
													change_tune(%multi_id_arr[$ma],-$poly_tune_diff,1)
												end if
												inc($ma)
											end while
									end if
									if ($poly_tune_diff < 0)
										$poly_direction := -1
									else
										$poly_direction := 1
									end if
									$poly_cur_diff := 0
									inc($loop_counter)
									$poly_checker := $loop_counter
									while(abs($poly_cur_diff) < abs($poly_tune_diff) and ($poly_checker = $loop_counter or $mono = 0))
										if ($porta_rel_glide_button = 1)
											if ($GlideRel = 0)
												$poly_interv := $poly_Tune_diff
											else
												$poly_interv := (1200000 / $GlideRel) *$poly_direction
												if (abs($poly_cur_diff + $poly_interv) > abs($poly_Tune_diff))
													$poly_interv := $poly_tune_diff - $poly_cur_diff
												end if
											end if
										else
											if ($Glideabs = 0)
												$poly_interv := $poly_Tune_diff
											else
												$poly_interv := ($poly_Tune_diff / $Glideabs)
												if (abs($poly_cur_diff + $poly_interv) > abs($poly_Tune_diff))
													$poly_interv := $poly_tune_diff - $poly_cur_diff
												end if
											end if							
										end if
										$cur_pos := $cur_pos + $poly_interv
										$mono_pos := $mono_pos + $poly_interv
										$poly_cur_diff := $poly_cur_diff + $poly_interv
										change_tune($poly_id,$poly_interv,1)
											$ma := 0
											while($ma < $multi_cursor)
												if ($poly_id = %multi_orig_id_arr[$ma])
													change_tune(%multi_id_arr[$ma],$poly_interv,1)
												end if
												inc($ma)
											end while
										wait(1000)
									end while
									if ($exit_after_portamento = 1)
										exit
									end if
										$ma := 0
										$b := $multi_cursor
										$multi_cursor := 0
										while($ma < $b)
											if ($EVENT_ID = %multi_orig_id_arr[$ma] or event_status(%multi_id_arr[$ma]) = 0  or ...
												(%multi_orig_id_arr[$ma] = $mono_id and $last_mono = 0)	)
												note_off(%multi_id_arr[$ma])
											else
												%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
												%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
												%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
												%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
												%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
												%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
												inc($multi_cursor)
											end if
											inc($ma)
										end while
									exit
								end if
									if ($exit_after_portamento = 1)
										exit
									end if
									$ma := 0
									$b := $multi_cursor
									$multi_cursor := 0
									while($ma < $b)
										if ($EVENT_ID = %multi_orig_id_arr[$ma] or event_status(%multi_id_arr[$ma]) = 0  or ...
											(%multi_orig_id_arr[$ma] = $mono_id and $last_mono = 0)	)
											note_off(%multi_id_arr[$ma])
										else
											%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
											%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
											%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
											%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
											%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
											%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
											inc($multi_cursor)
										end if
										inc($ma)
									end while
								exit
							end if
						else
							note_off($mono_id)
							set_event_par($mono_id,0,4)
								$ma := 0
								$b := $multi_cursor
								$multi_cursor := 0
								while($ma < $b)
										
									if ($mono_id = %multi_orig_id_arr[$ma] or event_status(%multi_id_arr[$ma]) = 0)
										note_off(%multi_id_arr[$ma])
										set_event_par(%multi_id_arr[$ma],0,4)
									else
										%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
										%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
										%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
										%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
										%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
										%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
										inc($multi_cursor)
									end if
									inc($ma)
								end while
							$mono_id := 0
							$cursor := 0			
						end if
					end if
					exit
				end if
				$a := 0
				$helper := $cursor
				$cursor := 0
				while($a < $helper)
					if (%hold_arr[%note_arr[$a]] > 0)
						%id_arr[$cursor] := %id_arr[$a]
						%note_arr[$cursor] := %note_arr[$a]
						%velo_arr[$cursor] := %velo_arr[$a]
						%time_arr[$cursor] := %time_arr[$a]
						inc($cursor)
					else
						note_off(%id_arr[$a])
						{**multi**}
							$ma := 0
							$b := $multi_cursor
							$multi_cursor := 0
							while($ma < $b)
								if ($EVENT_NOTE = %multi_orig_note_arr[$ma]{ or event_status(%multi_id_arr[$ma]) = 0} or ...
											(%multi_orig_id_arr[$ma] = $mono_id and $last_mono = 0)	)
									note_off(%multi_id_arr[$ma])
									{fade_out(%multi_id_arr[$ma],300000,1)}
								else
									%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
									%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
									%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
									%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
									%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
									%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
									inc($multi_cursor)
								end if
								inc($ma)
							end while
						{**multi**}
						set_event_par(%id_arr[$a],0,33)
					end if
					inc($a)
				end while


			end if



			if ($selected_group = 3)

				if($EVENT_ID = $currentnote_id)
					$glide_on := 0
					note_off($oldnote3_id)
					note_off($oldnote2_id)
					note_off($oldnote1_id)
					$current_pitch := $target_pitch
				end if
				if ($glide_on = 1 and $EVENT_ID # $oldnote3_id)
					ignore_event($EVENT_ID)
					wait($Glide)
					note_off($EVENT_ID)
				end if
			end if

			if ($selected_group = 5)
				{only one event per Note}
				if (%EVENT_PAR[0] = 2)
					{ignore_event($EVENT_ID)}
					if (%pressed_id_ARP[$EVENT_NOTE] = 0)
						exit
					else
						%pressed_id_ARP[$EVENT_NOTE] := 0
					end if
				else
					exit
				end if
				if ($latch_mode = 0)
					exit
				end if
				{which notes should be in the buffer}
				select ($latch_mode)
					case 1
						$a_ARP := 0
						$b_ARP := $cursor_ARP
						$cursor_ARP := 0
						while($a_ARP < $b_ARP)
							if ($EVENT_NOTE # %note_buffer[$a_ARP])
								%note_buffer[$cursor_ARP] := %note_buffer[$a_ARP]
								inc($cursor_ARP)
							end if
							inc($a_ARP)
						end while
					case 2 to 3
						exit
				end select
			end if
			
		end on
		

	{ - on release end - }

	{ - interval - }
		on ui_control ($interval_knob)
			if ($selected_group = 1)
				set_knob_label($interval_knob,!Interval_names[abs($interval_knob)])
			end if
		end on

	{ - interval end - }

	{ - midiMonitor Display - }
		on ui_control ($clear_button)
			$clear_button := 0
			set_text ($display, "")
		end on

		on ui_control ($verbose_button)
			set_text ($display, "")
		end on

		on controller

			{ - Sustain Pedal- }


			{ - Sustain Pedal end - }

			if ($verbose_button = 0)
				if ($CC_NUM = $VCC_PITCH_BEND and $pbend_button = 1)
					set_text ($display,"Pitch Bend ")
					add_text_line ($display, "Value: " & %CC[$CC_NUM])
				end if
				if (in_range($CC_NUM,0,127) and $controller_button = 1)
					set_text ($display,"Controller:  " & $CC_NUM & "   (" & !CC_names[$CC_NUM] & ")")
					add_text_line ($display, "Value: " & %CC[$CC_NUM])
				end if
				if ($CC_NUM = $VCC_MONO_AT and $pressure_button = 1)
					set_text ($display,"Channel Pressure (Mono Aftertouch)")
					add_text_line ($display, "Value: " & %CC[$CC_NUM])
				end if
			else
			{----- Verbose Mode -----}
				if ($CC_NUM = $VCC_PITCH_BEND and $pbend_button = 1)
					add_text_line ($display,"Pitch Bend " & "   Value: " & %CC[$CC_NUM])
				end if
				if (in_range($CC_NUM,0,127) and $controller_button = 1)
					add_text_line ($display,"Controller:  " & $CC_NUM & "   Value: " & %CC[$CC_NUM])
				end if
				if ($CC_NUM = $VCC_MONO_AT and $pressure_button = 1)
					add_text_line ($display,"Channel Pressure " & "   Value: " & %CC[$CC_NUM])
				end if
			end if

			{ - portamento - }
			select ($CC_NUM)
				case 64
					$flag_nr_cc := 1
					if (%CC[64] > 63 and %last_cc[64] < 64)
						$a := 0
						while($a < 128)
							%sos_state[$a] := %sos_state[$a] .or. $flag_nr_cc
							inc($a)
						end while
					end if
					if (%CC[64] < 64 and %last_cc[64] > 63)
						$func_cc_note_off := 1
					end if
					%last_cc[$CC_NUM] := %CC[$CC_NUM] 
				case 66
					$flag_nr_cc := 2
					if (%CC[66] > 63 and %last_cc[66] < 64)
						$a := 0
						while($a < 128)
							if (%pressed_id[$a] > 0)
								%sos_state[$a] := %sos_state[$a] .or. $flag_nr_cc
							end if
							inc($a)
						end while
					end if
					if (%CC[66] < 64 and %last_cc[66] > 63)
						$func_cc_note_off := 1
					end if
					%last_cc[$CC_NUM] := %CC[$CC_NUM] 
			end select
			if ($func_cc_note_off = 1)
				$func_cc_note_off := 0
				$a := 0
				while($a < 128)
					%sos_state[$a] := %sos_state[$a] .and. (.not. $flag_nr_cc)
					if (%sos_state[$a] = 0 and %hold_arr[$a] > 0 )
						%hold_arr[$a] := 0
						dec($hold_nr)
					end if
					inc($a)
				end while	
				$a := 0
				$helper := $cursor
				$cursor := 0
				while($a < $helper)
					if (%hold_arr[%note_arr[$a]] > 0{ and event_status(%id_arr[$a]) > 0})
						%id_arr[$cursor] := %id_arr[$a]
						%note_arr[$cursor] := %note_arr[$a]
						%velo_arr[$cursor] := %velo_arr[$a]
						%time_arr[$cursor] := %time_arr[$a]
						inc($cursor)
					else
						note_off(%id_arr[$a])
						set_event_par(%id_arr[$a],0,4)
						{**multi**}
						$ma := 0
						$b := $multi_cursor
						$multi_cursor := 0
						while($ma < $b)
							if (%id_arr[$a] = %multi_orig_id_arr[$ma] or event_status(%multi_id_arr[$ma]) = 0)
								note_off(%multi_id_arr[$ma])
								set_event_par(%multi_id_arr[$ma],0,4)
							else
								%multi_id_arr[$multi_cursor] := %multi_id_arr[$ma]
								%multi_note_arr[$multi_cursor] := %multi_note_arr[$ma]
								%multi_orig_id_arr[$multi_cursor] := %multi_orig_id_arr[$ma]
								%multi_orig_note_arr[$multi_cursor] := %multi_orig_note_arr[$ma]
								%multi_ix_array[$multi_cursor] := %multi_ix_array[$ma]
								%multi_trans_arr[$multi_cursor] := %multi_trans_arr[$ma]
								inc($multi_cursor)
							end if
							inc($ma)
						end while
						{**multi**}
					end if
					inc($a)
				end while
				if ($cursor = 0)
					$mono_id := 0
				end if
			end if
			{ - portamento end - }

		end on
		on rpn
			if ($verbose_button = 0)
				if ($rpn_nrpn = 1)
					select ($RPN_ADDRESS)
						case 0
							set_text ($display,"RPN: " & $RPN_ADDRESS  & "   (Pitch Bend Sensitivity)")
						case 1
							set_text ($display,"RPN: " & $RPN_ADDRESS & "   (Fine Tuning)")
						case 2
							set_text ($display,"RPN: " & $RPN_ADDRESS  & "   (Coarse Tuning)")
						case 3 to 16383
							set_text ($display,"RPN: " & $RPN_ADDRESS)
						end select
						add_text_line ($display, "Value: " & $RPN_VALUE)
				end if
			else
			{----- Verbose Mode -----}
				if ($rpn_nrpn = 1)
					add_text_line ($display,"RPN " & $RPN_ADDRESS & "   Value: " & $RPN_VALUE)
				end if
			end if
		end on
		on nrpn
			if ($verbose_button = 0)
				if ($rpn_nrpn = 1)
					set_text ($display,"NRPN: " & $RPN_ADDRESS)
					add_text_line ($display, "Value: " & $RPN_VALUE)
				end if
			else
			{----- Verbose Mode -----}
				if ($rpn_nrpn = 1)
					add_text_line ($display,"NRPN " & $RPN_ADDRESS & "   Value: " & $RPN_VALUE)
				end if
			end if
		end on
	{ - midiMonitor Display end - }


	{ - portamento - }

		on ui_control ($mono_amp_rel_button)
			if ($selected_group = 2)
				if ($mono_amp_rel_button = 0 and $legato = 0)
					set_text($mono_fade_out_knob,"Fade Out")	
					set_text($mono_fade_in_knob,"Fade In")	
				else
					set_text($mono_fade_out_knob,"n/a")	
					set_text($mono_fade_in_knob,"n/a")	
				end if
			end if
		end on

		on ui_control ($voice_fade_sw_knob)
			if ($selected_group = 2)
				$a := $voice_fade_sw_knob/10
				$fade_sw := ($a*$a*2000)/(200*200)
				if ($fade_sw < 1000)
					set_knob_label($voice_fade_sw_knob,$fade_sw/1000&"."&($fade_sw mod 1000)/100&($fade_sw mod 100)/10&" s")
				else
					set_knob_label($voice_fade_sw_knob,$fade_sw/1000&"."&($fade_sw mod 1000)/100&" s")	
				end if	
				$fade_sw := $fade_sw*1000
			end if
		end on


		on ui_control ($porta_combi_knob)
			if ($selected_group = 2)
				select ($porta_combi_knob)
					case 0 to 31
						$GlideRel := ($porta_combi_knob * 80)/32
					case 32 to 63
						$GlideRel := (($porta_combi_knob-32) * 120)/32 + 80
					case 64 to 95
						$GlideRel := (($porta_combi_knob-64) * 200)/32 + 200
					case 96 to 127
						$GlideRel := (($porta_combi_knob-96) * 2600)/31 +400
				end select
				$GlideAbs := ($porta_combi_knob*$porta_combi_knob*2000)/(127*127)
				{if ($porta_rel_glide_button = 1)
					set_knob_label($porta_combi_knob,$GlideRel)		
				else
					if ($GlideAbs < 1000)
						set_knob_label($porta_combi_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&($GlideAbs mod 100)/10&" s")
					else
						set_knob_label($porta_combi_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&" s")	
					end if	
				end if}
			end if
		end on
		
{ 		on ui_control ($porta_rel_knob)
			select ($porta_rel_knob)
				case 0 to 31
					$GlideRel := ($porta_rel_knob * 80)/32
				case 32 to 63
					$GlideRel := (($porta_rel_knob-32) * 120)/32 + 80
				case 64 to 95
					$GlideRel := (($porta_rel_knob-64) * 200)/32 + 200
				case 96 to 127
					$GlideRel := (($porta_rel_knob-96) * 2600)/31 +400
			end select
		end on

		on ui_control ($porta_abs_knob)
			$GlideAbs := ($porta_abs_knob*$porta_abs_knob*2000)/(127*127)
			if ($GlideAbs < 1000)
				set_knob_label($porta_abs_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&($GlideAbs mod 100)/10&" s")
			else
				set_knob_label($porta_abs_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&" s")	
			end if
		end on }


		on ui_control ($porta_rel_glide_button)
			if ($selected_group = 2)
				select ($porta_combi_knob)
					case 0 to 31
						$GlideRel := ($porta_combi_knob * 80)/32
					case 32 to 63
						$GlideRel := (($porta_combi_knob-32) * 120)/32 + 80
					case 64 to 95
						$GlideRel := (($porta_combi_knob-64) * 200)/32 + 200
					case 96 to 127
						$GlideRel := (($porta_combi_knob-96) * 2600)/31 +400
				end select
				$GlideAbs := ($porta_combi_knob*$porta_combi_knob*2000)/(127*127)
	{ 			if ($porta_rel_glide_button = 1)
					set_knob_label($porta_combi_knob,$GlideRel)		
				else
					if ($GlideAbs < 1000)
						set_knob_label($porta_combi_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&($GlideAbs mod 100)/10&" s")
					else
						set_knob_label($porta_combi_knob,$Glideabs/1000&"."&($GlideAbs mod 1000)/100&" s")	
					end if	
				end if }
			end if
		end on

		on ui_control ($voice_fade_synth_out_knob)
			if ($selected_group = 2)
				$a := $voice_fade_synth_out_knob/10
				$fade_synth_out := ($a*$a*2000)/(200*200)
				if ($fade_synth_out < 1000)
					set_knob_label($voice_fade_synth_out_knob,$fade_synth_out/1000&"."&($fade_synth_out mod 1000)/100&($fade_synth_out mod 100)/10&" s")
				else
					set_knob_label($voice_fade_synth_out_knob,$fade_synth_out/1000&"."&($fade_synth_out mod 1000)/100&" s")	
				end if	
				$fade_synth_out := $fade_synth_out*1000
			end if
		end on

		on ui_control($mono_fade_out_knob)
			if ($selected_group = 2)
				$a := $mono_fade_out_knob/10
				$fadeout := (($a*$a*2000)/(200*200))+10
				if ($fadeout < 1000)
					set_knob_label($mono_fade_out_knob,($fadeout-10)/1000&"."&(($fadeout-10) mod 1000)/100&(($fadeout-10) mod 100)/10&" s")
				else
					set_knob_label($mono_fade_out_knob,($fadeout-10)/1000&"."&(($fadeout-10) mod 1000)/100&" s")	
				end if
			end if
		end on

		on ui_control($mono_fade_in_knob)
			if ($selected_group = 2)
				$a := $mono_fade_in_knob/10
				$fadein := (($a*$a*2000)/(200*200))+10
				if ($fadein < 1000)
					set_knob_label($mono_fade_in_knob,($fadein-10)/1000&"."&(($fadein-10) mod 1000)/100&(($fadein-10) mod 100)/10&" s")
				else
					set_knob_label($mono_fade_in_knob,($fadein-10)/1000&"."&(($fadein-10) mod 1000)/100&" s")	
				end if	
			end if
		end on

		on ui_control($mono_key_up_button)
			if ($selected_group = 2)
				if ($legato_button = 0)
					set_text($mono_amp_rel_label,"Amp Release:")
				else
					set_text($mono_amp_rel_label,"n/a")
				end if
					
				
				if ($mono_button = 1 and $mono_key_up_button = 1 and $bad_active = 0)
					$bad_active := 1
					$a := 0
					while($a < 128)	
						%bad_retrigger_id[$a] := %pressed_id[$a]
						inc($a)
					end while
				else
					$bad_active := 0
				end if
			end if
		end on

		on ui_control ($mono_mode_knob)
			if ($selected_group = 2)
				set_knob_label($mono_mode_knob,!Mode_name[$mono_mode_knob])
				select ($mono_mode_knob)
					case 0 
						$mono_button := 0
					case 1
						$mono_button := 1
						$legato_button := 0
					case 2
						$mono_button := 1
						$legato_button := 1
					case 3
						$mono_button := 1
						$legato_button := 0
				end select
				if ($mono_mode_knob # 2 and $mono_amp_rel_button = 0)
					set_text($mono_fade_in_knob,"Fade In")	
					set_text($mono_fade_out_knob,"Fade Out")	
				else
					set_text($mono_fade_in_knob,"n/a")	
					set_text($mono_fade_out_knob,"n/a")	
				end if
				
				if ($mono_mode_knob # 2)
					set_text($mono_amp_rel_label,"Amp Release:")
				else
					set_text($mono_amp_rel_label,"n/a")
				end if
				
				$mono := $mono_button
				$legato := $legato_button
				if ($mono_button = 1 and $mono_key_up_button = 1 and $bad_active = 0)
					$bad_active := 1
					$a := 0
					while($a < 128)	
						%bad_retrigger_id[$a] := %pressed_id[$a]
						inc($a)
					end while
				else
					$bad_active := 0
				end if
			end if
		end on

		on ui_control ($portamento_knob)
			if ($selected_group = 2)
				set_knob_label($portamento_knob,!Portamento_knob_name[$portamento_knob])		
				select ($portamento_knob)
					case 0
						$Portamento_button := 0
						$Auto_button := 0
					case 1
						$Portamento_button := 1
						$Auto_button := 0
					case 2
						$Portamento_button := 1
						$Auto_button := 1
				end select
				$portamento := $portamento_button
				$auto := $auto_button	
			end if
		end on

		on ui_control ($mono_retrig_velo_menu)
			if ($selected_group = 2)
				if ($mono_mode_knob = 2 or $mono_key_up_button = 0)
					$mono_retrig_velo_menu := $last_velo_menu
				end if
				$last_velo_menu := $mono_retrig_velo_menu
			end if
		end on

		on ui_control ($mono_prio_menu)
			if ($selected_group = 2)
				if ($mono_key_up_button = 0)
					$mono_prio_menu := $last_prio_menu
				end if
				$last_prio_menu := $mono_prio_menu
			end if
		end on

		on ui_control ($voice_menu)
			if ($selected_group = 2)
				move_control ($voice_keyclick_menu,0,0)
				move_control ($voice_keyclick_label,0,0)
				move_control($voice_fade_sw_knob,0,0)
				move_control ($voice_fade_synth_out_knob,0,0)
				select ($voice_menu)
					case 1
						move_control ($voice_keyclick_menu,2,9)
						move_control ($voice_keyclick_label,2,8)
					case 2
						move_control($voice_fade_sw_knob,2,8)
					case 3
						move_control ($voice_fade_synth_out_knob,2,8)
				end select
			end if
		end on


		on ui_control ($Expert)
			if ($selected_group = 2)
				if ($Expert = 1)
					$count := 0
					while ($count < $NUM_DEFAULT_VIEW)
						set_control_par(%default_view_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($count)
					end while
					
					$count := 0
					while ($count < $NUM_EXPERT_VIEW)
						set_control_par(%expert_view_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($count)
					end while
					move_control ($voice_keyclick_menu,0,0)
					move_control ($voice_keyclick_label,0,0)
					move_control($voice_fade_sw_knob,0,0)
					move_control ($voice_fade_synth_out_knob,0,0)
					select ($voice_menu)
						case 1
							move_control ($voice_keyclick_menu,2,9)
							move_control ($voice_keyclick_label,2,8)
						case 2
							move_control($voice_fade_sw_knob,2,8)
						case 3
							move_control ($voice_fade_synth_out_knob,2,8)
					end select		
				else
					$count := 0
					while ($count < $NUM_DEFAULT_VIEW)
						set_control_par(%default_view_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($count)
					end while
					
					$count := 0
					while ($count < $NUM_EXPERT_VIEW)
						set_control_par(%expert_view_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($count)
					end while
				end if
			end if
		end on

	{ - Portamento end - }

	{ - Microtuning - }
		on ui_control(%tune_ui)
			if ($selected_group = 4)
				$aMicro := 0
				while($aMicro < 12)
					%preset_store[($Preset-1)*12+$aMicro] := %tune_ui[$aMicro]
					inc($aMicro)
				end while
			end if
		end on

		on ui_control ($preset_menu)
			if ($selected_group = 4)
				if ($preset_menu < 99)
					select($preset_menu)
						case 0
							$aMicro := 0
							while($aMicro < 12)
								%helper_tune[$aMicro] := %tune_ui[$aMicro]
								inc($aMicro)
							end while
						case 1
							$aMicro := 0
							while($aMicro < 12)
								%tune_ui[$aMicro] := %helper_tune[$aMicro]
								%preset_store[($Preset-1)*12+$aMicro] := %tune_ui[$aMicro]
								inc($aMicro)
							end while
						case 2
							$aMicro := 0
							while($aMicro < 12)
								%tune_ui[$aMicro] := 0
								%preset_store[($Preset-1)*12+$aMicro] := 0
								inc($aMicro)
							end while
						case 3
							$bMicro := 0
							while($bMicro < 12)
								$aMicro := 0
								while($aMicro < 12)
									%preset_store[$bMicro*12+$aMicro] := %tune_ui[$aMicro]
									inc($aMicro)
								end while
								inc($bMicro)
							end while
						case 4 to 15
							$aMicro := 0
							while($aMicro < 12)
								%tune_ui[$aMicro] := %tune_factory[($preset_menu-4)*12 + $aMicro]
								%preset_store[($Preset-1)*12+$aMicro] := %tune_ui[$aMicro]			
								inc($aMicro)
							end while
					end select
				end if
				$preset_menu := 100
			end if
		end on

		on ui_control ($Preset)
			if ($selected_group = 4)
				$aMicro := 0
				while($aMicro < 12)
					%tune_ui[$aMicro] := %preset_store[($Preset-1)*12+$aMicro]
					inc($aMicro)
				end while
			end if
		end on

		on ui_control ($key_knobMicro)
			if ($selected_group = 4)
				set_text ($label,!key_label[(0+$key_knobMicro) mod 12]&""&...
				!key_label[(1+$key_knobMicro) mod 12]&""&...
				!key_label[(2+$key_knobMicro) mod 12]&""&...
				!key_label[(3+$key_knobMicro) mod 12]&""&...
				!key_label[(4+$key_knobMicro) mod 12]&""&...
				!key_label[(5+$key_knobMicro) mod 12]&""&...
				!key_label[(6+$key_knobMicro) mod 12]&""&...
				!key_label[(7+$key_knobMicro) mod 12]&""&...
				!key_label[(8+$key_knobMicro) mod 12]&""&...
				!key_label[(9+$key_knobMicro) mod 12]&""&...
				!key_label[(10+$key_knobMicro) mod 12]&""&...
				!key_label[(11+$key_knobMicro) mod 12])
				set_knob_label($key_knobMicro,!key_label[(0+$key_knobMicro) mod 12])
			end if
		end on
	{ - Microtuning end - }

	{ - Arp - }
		on ui_control ($latch_knob)
			if ($selected_group = 5)
				$latch_mode := $latch_knob
				select ($latch_mode)
					case 0
						set_knob_label($latch_knob,"Off")
						$a_ARP := 0
						while($a_ARP < $cursor_ARP)
							%note_buffer[$a_ARP] := 0
							inc($a_ARP)
						end while
						$cursor_ARP := 0 
					case 1
						set_knob_label($latch_knob,"On")
						$b_ARP := $cursor_ARP
						$cursor_ARP := 0 
						$a_ARP := 0
						while($a_ARP < $b_ARP)
							if (%pressed_id_ARP[%note_buffer[$a_ARP]] > 0)
								%note_buffer[$cursor_ARP] := %note_buffer[$a_ARP]
								inc($cursor_ARP)
							end if
							inc($a_ARP)
						end while
					case 2
						set_knob_label($latch_knob,"Hold")
					case 3
						set_knob_label($latch_knob,"Hold +-")
				end select
			end if
		end on

		on ui_control ($Sync_knob)
			if ($selected_group = 5)
				set_knob_label ($Sync_knob,!tempo_names[$Sync_knob])
			end if
		end on

		on ui_control($edit_Preset)
			if ($selected_group = 5)
				if ($edit_Preset < 99)
					{select($edit_Preset)
						case 1
							$a_ARP := 0
							while($a_ARP < 42)
								%helper_preset[$a_ARP] := %preset_arr[(($Preset_knob - 1)*42)+$a_ARP ]
								inc($a_ARP)
							end while
						case 2
							$a_ARP := 0
							while($a_ARP < 42)
								%preset_arr[(($Preset_knob - 1)*42)+$a_ARP ] := %helper_preset[$a_ARP]
								inc($a_ARP)
							end while
						case 3
							$a_ARP := 0
							while($a_ARP < 42)
								%preset_arr[(($Preset_knob - 1)*42)+$a_ARP ] := %default_preset[$a_ARP]
								inc($a_ARP)
							end while
						case 7
							$b := 0
							while($b < 12)
								$a_ARP := 0
								while($a_ARP < 42)
									%preset_arr[($b*42)+$a_ARP ] := %preset_arr[(($Preset_knob - 1)*42)+$a_ARP]
									inc($a_ARP)
								end while
								inc($b)
							end while
						case 4
							$a_ARP := 0
							while($a_ARP < 33)
								%helper_rhythm[$a_ARP] := %preset_arr[(($Preset_knob - 1)*42)+$a_ARP ]
								inc($a_ARP)
							end while
						case 5
							$a_ARP := 0
							while($a_ARP < 33)
								%preset_arr[(($Preset_knob - 1)*42)+$a_ARP ] := %helper_rhythm[$a_ARP]
								inc($a_ARP)
							end while
						case 6
							$a_ARP := 0
							while($a_ARP < 33)
								%preset_arr[(($Preset_knob - 1)*42)+$a_ARP ] := %default_preset[$a_ARP]
								inc($a_ARP)
							end while
						case 8 
							$a_ARP := 0
							while($a_ARP < 32)
								if (%preset_arr[(($Preset_knob - 1)*42)+$a_ARP ] > 0)
									%preset_arr[(($Preset_knob - 1)*42)+$a_ARP ] := random(1,100)
								end if
								inc($a_ARP)
							end while
					end select}
					$a_ARP := 0
					set_table_steps_shown(%rhythm, $steps)
					$sync_knob := ($Rate_knob * 18) /1000001
					set_knob_defval ($Rate_knob,(5 *1000001) / 17)
					set_knob_label ($Rate_knob,!tempo_names[$sync_knob])
					set_knob_unit($Rate_knob,$KNOB_UNIT_NONE)
						
				end if
				$edit_preset := 100
			end if
		end on

		on ui_control ($steps)
			if ($selected_group = 5)
				set_table_steps_shown(%rhythm, $steps)
			end if
		end on

		on ui_control ($note_order)
			if ($selected_group = 5)
				if ($note_order # 99)
					$last_note_order := $note_order
				else
					$note_order:= $last_note_order
				end if
			end if
		end on

		on ui_control ($rate_knob)
			if ($selected_group = 5)
			
				$sync_knob := ($Rate_knob * 18) /1000001
				set_knob_label ($Rate_knob,!tempo_names[$sync_knob])
			end if
				
		end on

	{ - Arp end - }


	{function lock_script(ui_height, status)

		declare lock
		make_persistent(lock)
		read_persistent_var(lock)

		declare ui_slider sli_noopen(0, 1)
		sli_noopen -> PICTURE := "lock"
		sli_noopen -> POS_X := 0
		sli_noopen -> ALLOW_AUTOMATION := 0

		if (in_range(ui_height, 54, 540))
			sli_noopen -> POS_Y := ui_height-20
		else
			sli_noopen -> POS_Y := 34
		end if

		sli_noopen -> HIDE := HIDE_WHOLE_CONTROL

		if (status = 0)
			lock := 0
		else
			if (lock < 1)
				inc(lock)
			else
				sli_noopen -> HIDE := HIDE_PART_NOTHING
			end if
		end if

	end function}


{---------------Extra----------------}

{ set_knob_label($eqGainLow, get_engine_par_disp($ENGINE_PAR_GAIN1, 0, 0, -1)) }
	{PAR_1: -1 for insert fx, 0 for groupInsert} {PAR_2: index of fx pos} {PAR_3: 1 for insert fx, 0 for send}
	
	{remember to CHANGE/UPDATE the control we're changing}

{ ----------------------------------------------------------------------------------------- }
{ - workspace - }













{END OF SCRIPT}
